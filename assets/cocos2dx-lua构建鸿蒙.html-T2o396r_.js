import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o,c as t,b as n,d as e,e as a,f as c,a as d}from"./app-eoFJCgQI.js";const l={},u=e("h4",{id:"编译cocos2dx-lua鸿蒙测试项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#编译cocos2dx-lua鸿蒙测试项目","aria-hidden":"true"},"#"),a(" 编译cocos2dx-lua鸿蒙测试项目")],-1),m={href:"https://gitee.com/openharmony-sig/cocos2dx",target:"_blank",rel:"noopener noreferrer"},p=e("br",null,null,-1),v=e("br",null,null,-1),b=e("br",null,null,-1),h=e("br",null,null,-1),x=d(`<h4 id="资源" tabindex="-1"><a class="header-anchor" href="#资源" aria-hidden="true">#</a> 资源</h4><p>lua代码和图片资源目录在<mark>cocos2dx\\tests\\lua-tests\\project\\proj.ohos\\entry\\src\\main\\resources\\rawfile</mark>下，这个文件夹的生成，可参考<br><mark>cocos2dx\\tests\\lua-tests\\project\\CMakeLists.tx</mark>t文件</p><h4 id="cpp代码和库文件" tabindex="-1"><a class="header-anchor" href="#cpp代码和库文件" aria-hidden="true">#</a> cpp代码和库文件</h4><p>项目里引入的cpp代码，可参考<mark>cocos2dx\\tests\\lua-tests\\project\\proj.ohos\\entry\\src\\main\\cpp\\CMakeLists.txt</mark>文件</p><h4 id="测试问题" tabindex="-1"><a class="header-anchor" href="#测试问题" aria-hidden="true">#</a> 测试问题</h4><p>1.EditBox点击输入调用键盘时，第一下点击可以使editbox聚焦，但是不能弹出键盘，第二下点击才可以弹出键盘<br> 2.webView组件目前loadURL接口不能加载网页，但是loadFile加载本地网页是可以生效的<br> 3.videoPlayer组件，加载后位置不准确</p><h4 id="lua与鸿蒙交互" tabindex="-1"><a class="header-anchor" href="#lua与鸿蒙交互" aria-hidden="true">#</a> lua与鸿蒙交互</h4><p>参考<mark>VibrateTest.lua</mark> ，首先lua先与cpp交互，调用 \`\`\`<br> cc.Device:vibrate(duration)<br> 然后我们找到cocos2dx中platform对ohos的Device实现，<mark>CCDevice-ohos.cpp</mark>文件中的vibrate方法，使用了<code>JSFunction::getFunction(&quot;DeviceUtils.startVibration&quot;).invoke&lt;void&gt;(duration);</code><br> 然后我们可以找到项目中<mark>libSysCapabilities</mark>库中<mark>DeviceUtils.ts</mark>文件，查看startVibration的鸿蒙实现</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  static startVibration(time: number) {
    try {
      vibrator.startVibration({
        type: &#39;time&#39;,
        duration: time * 1000, // 秒转毫秒
      }, {
        id: 0,
        usage: &#39;unknown&#39;
      }, (error) =&gt; {
        if (error) {
          log.error(&#39;vibrate fail, error.code: %{public}d, error.message: %{public}s&#39;, error.code, error.message);
          return;
        }
      });
    } catch (err) {
      log.error(&#39;error.code: %{public}d, error.message: %{public}s&#39;, err.code, err.message);
    }
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于DeviceUtils初始化，在项目下的<mark>CocosWorker.ts</mark>文件中，对于startVibration的函数注册，在<mark>libSysCapabilities</mark>库中<mark>NapiHelper.ts</mark>文件中，这一部分建议大家自己研究。另外，暂时没有发现<mark>cocos2dx\\cocos\\scripting\\lua-bindings\\manual\\platform</mark>的鸿蒙文件，没有类似luac和luaj的使用。</p><h4 id="鸿蒙调用cocos" tabindex="-1"><a class="header-anchor" href="#鸿蒙调用cocos" aria-hidden="true">#</a> 鸿蒙调用cocos</h4><p>参考键盘输入，这里用editBoxOnChange举例<br> 鸿蒙这边使用postMessage发送事件，如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>this.cocosWorker.postMessage({type: &quot;editBoxOnChange&quot;, viewTag: this.textInputInfo.viewTag, value: value});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，我们需要在<mark>CocosWorker.ts</mark>文件中处理<mark>editBoxOnChange</mark>这个函数，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>case &quot;editBoxOnChange&quot;:
            inputNapi.editBoxOnChangeCB(data.viewTag, data.value);
            break;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并执行对应Napi的回调函数，这里建议补全<mark>entry\\src\\main\\cpp\\types\\libentry\\index.d.ts</mark>函数名.然后我们去查看<mark>cocos2dx\\cocos\\platform\\ohos\\napi\\modules\\InputNapi.cpp</mark>的cpp实现。这里能反射成功，需要我们去查看<mark>cocos2dx\\cocos\\platform\\ohos\\napi\\plugin_manager.cpp的GetContext函数</mark>这里记得同步鸿蒙和cpp中的ContextType枚举</p>`,16);function g(k,_){const r=s("ExternalLinkIcon");return o(),t("div",null,[n(" more "),u,e("p",null,[a("1.将使用鸿蒙修改的cocos2dx仓库克隆到本地，仓库地址："),e("a",m,[a("https://gitee.com/openharmony-sig/cocos2dx"),c(r)]),p,a(" 2.准备好鸿蒙开发环境，DevEco Studio NEXT版本，SDK使用HarmonyOS NEXT Developer Preview0（目前需要申请权限，具体申请流程联系市场部诸葛文俊）"),v,a(" 3.使用DevEco Studio打开cocos2dx\\tests\\lua-tests\\project\\proj.ohos 项目"),b,a(" 4.使用DevEco Studio新建一个空项目，然后将hvigor文件夹替换掉 cocos2dx\\tests\\lua-tests\\project\\proj.ohos下的hvigor文件夹（这里如果编译出问题再执行第四步）"),h,a(" 5.找到proj.ohos下的build-profile.json5文件，将signingConfigs下的证书替换成自己的证书，然后使用真机编译即可")]),x])}const y=i(l,[["render",g],["__file","cocos2dx-lua构建鸿蒙.html.vue"]]);export{y as default};
