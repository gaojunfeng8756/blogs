import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,b as t,a as p}from"./app-EGXHdLvk.js";const o={},e=p(`<h4 id="修改鸿蒙取字体高度不够导致有切边的问题" tabindex="-1"><a class="header-anchor" href="#修改鸿蒙取字体高度不够导致有切边的问题" aria-hidden="true">#</a> 修改鸿蒙取字体高度不够导致有切边的问题</h4><p>原文件Quick-Cocos2dx-Community\\cocos\\platform\\ohos\\CCTextBitmap.cpp找到绘制函数createCCTextBitmap</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>CCTextBitmap<span class="token operator">*</span> <span class="token class-name">CCTextBitmap</span><span class="token double-colon punctuation">::</span><span class="token function">createCCTextBitmap</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">,</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pFontName<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> fontSize<span class="token punctuation">,</span>
            <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintA<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintR<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintG<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintB<span class="token punctuation">,</span>
            <span class="token keyword">const</span> Device<span class="token double-colon punctuation">::</span>TextAlign eAlignMask<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pWidth<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pHeight<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> shadow<span class="token punctuation">,</span>
            <span class="token keyword">const</span> <span class="token keyword">float</span> shadowDX<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> shadowDY<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> shadowBlur<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> stroke<span class="token punctuation">,</span>
            <span class="token keyword">const</span> <span class="token keyword">float</span> strokeR<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> strokeG<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> strokeB<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> strokeSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CCTextBitmap <span class="token operator">*</span>cCTextBitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CCTextBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Manages typographical styles, such as text orientation.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTypographyStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the text to be displayed from left to right.</span>
    <span class="token function">OH_Drawing_SetTypographyTextDirection</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle<span class="token punctuation">,</span> TEXT_DIRECTION_LTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> align <span class="token operator">=</span> <span class="token function">processTextAlign</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>eAlignMask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set text alignment</span>
    <span class="token function">OH_Drawing_SetTypographyTextAlign</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle<span class="token punctuation">,</span> align<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Used to load fonts</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_fontCollection <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateFontCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Creates a pointer to the OH_Drawing_TypographyCreate object</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTypographyHandler</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle<span class="token punctuation">,</span>
		cCTextBitmap<span class="token operator">-&gt;</span>_fontCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Used to manage font colors, decorations, etc.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_textStyle <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Set Text Color</span>
    <span class="token function">OH_Drawing_SetTextStyleColor</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token function">OH_Drawing_ColorSetArgb</span><span class="token punctuation">(</span>fontTintA<span class="token punctuation">,</span> fontTintR<span class="token punctuation">,</span> fontTintG<span class="token punctuation">,</span> fontTintB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Set text size</span>
    <span class="token function">OH_Drawing_SetTextStyleFontSize</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> fontSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> DEFAULT_FONTSIZE <span class="token operator">:</span> fontSize<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token comment">// Set word weight</span>
    <span class="token function">OH_Drawing_SetTextStyleFontWeight</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> FONT_WEIGHT_400<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the font baseline position. TEXT_BASELINE_ALPHABotic is used to display phonetic characters and the baseline position is lower in the middle. TEXT_BASELINE_IDEOGRAPHIC for ideographic text with baseline at bottom</span>
    <span class="token function">OH_Drawing_SetTextStyleBaseLine</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> TEXT_BASELINE_ALPHABETIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set font height</span>
    <span class="token function">OH_Drawing_SetTextStyleFontHeight</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fontFamilies<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>pFontName<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the font type</span>
    <span class="token function">OH_Drawing_SetTextStyleFontFamilies</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fontFamilies<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the font style. The font style is not italicized. FONT_EVEN_ITALIC Italic</span>
    <span class="token function">OH_Drawing_SetTextStyleFontStyle</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> FONT_STYLE_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Setting the Language Area</span>
    <span class="token function">OH_Drawing_SetTextStyleLocale</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Set the typesetting style</span>
    <span class="token function">OH_Drawing_TypographyHandlerPushTextStyle</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">,</span> cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set text content</span>
    <span class="token function">OH_Drawing_TypographyHandlerAddText</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Typesetting pop-up</span>
    <span class="token function">OH_Drawing_TypographyHandlerPopTextStyle</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Used to create OH_Drawing_Typography, which is used to manage the layout and display of typesetting.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_typography <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTypography</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// The input width of the outer layer is preferentially used. If the input width is not used, the calculated width is used.</span>
    <span class="token keyword">int</span> layoutWidth <span class="token operator">=</span> pWidth<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pWidth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// In NAPI mode, call the ArkTS function to calculate the text width. Here, 400 is the word weight, which corresponds to the value of OH_Drawing_SetTextStyleFontWeight.</span>
        layoutWidth <span class="token operator">=</span> <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;StringUtils.getWidth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> fontSize<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// typographic layout, setting maximum text width</span>
    <span class="token function">OH_Drawing_TypographyLayout</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">,</span> layoutWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Obtains the maximum inherent width.</span>
    <span class="token keyword">int</span> realWidth <span class="token operator">=</span> <span class="token function">OH_Drawing_TypographyGetMaxIntrinsicWidth</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Obtaining the height</span>
    <span class="token keyword">int</span> realHeight <span class="token operator">=</span> <span class="token function">OH_Drawing_TypographyGetHeight</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> textWidth <span class="token operator">=</span> pWidth <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> pWidth <span class="token operator">:</span> realWidth<span class="token punctuation">;</span>
    <span class="token keyword">int</span> textHeight <span class="token operator">=</span> pHeight <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> pHeight <span class="token operator">:</span> realHeight<span class="token punctuation">;</span>

    <span class="token comment">// Format used to describe the bit pixel, including color type and transparency type.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_bitmap <span class="token operator">=</span> <span class="token function">OH_Drawing_BitmapCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// COLOR_FORMAT_RGBA_8888：Each pixel is represented by a 32-bit quantity. 8 bits indicate transparency, 8 bits indicate red, 8 bits indicate green, and 8 bits indicate blue.</span>
    <span class="token comment">// ALPHA_FORMAT_OPAQUE：Bitmap has no transparency</span>
    OH_Drawing_BitmapFormat cFormat <span class="token operator">=</span> <span class="token punctuation">{</span>COLOR_FORMAT_RGBA_8888<span class="token punctuation">,</span> ALPHA_FORMAT_OPAQUE<span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Initializes the width and height of the bitmap object, and sets the pixel format for the bitmap.</span>
    <span class="token function">OH_Drawing_BitmapBuild</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_bitmap<span class="token punctuation">,</span> textWidth<span class="token punctuation">,</span> textHeight <span class="token punctuation">,</span> <span class="token operator">&amp;</span>cFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Create a canvas object</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_canvas <span class="token operator">=</span> <span class="token function">OH_Drawing_CanvasCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Bind a bitmap object to the canvas so that the content drawn on the canvas is output to the bitmap (i.e., CPU rendering).</span>
    <span class="token function">OH_Drawing_CanvasBind</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_canvas<span class="token punctuation">,</span> cCTextBitmap<span class="token operator">-&gt;</span>_bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">double</span> xStart <span class="token operator">=</span> <span class="token function">calxStartPosition</span><span class="token punctuation">(</span>align<span class="token punctuation">,</span> layoutWidth<span class="token punctuation">,</span> realWidth<span class="token punctuation">,</span> textWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> yStart <span class="token operator">=</span> <span class="token function">calyStartPosition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>eAlignMask<span class="token punctuation">,</span> realHeight<span class="token punctuation">,</span> textHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>xStart<span class="token punctuation">,</span> yStart<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// Uses the specified color to clear the canvas. OH_Drawing_ColorSetArgb: Converts four variables (respectively describing transparency, red, green, and blue) to a 32-bit (ARGB) variable that describes colors.</span>
    <span class="token function">OH_Drawing_CanvasClear</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_canvas<span class="token punctuation">,</span> <span class="token function">OH_Drawing_ColorSetArgb</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Display Text</span>
    <span class="token function">OH_Drawing_TypographyPaint</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">,</span> cCTextBitmap<span class="token operator">-&gt;</span>_canvas<span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">constexpr</span> <span class="token keyword">uint32_t</span> stride <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int32_t</span> addrSize <span class="token operator">=</span> pWidth <span class="token operator">*</span> pHeight <span class="token operator">*</span> stride<span class="token punctuation">;</span>
    <span class="token comment">// Obtains the pixel address of a specified bitmap. The pixel data of the bitmap can be obtained based on the pixel address.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>pixelAddr <span class="token operator">=</span> <span class="token function">OH_Drawing_BitmapGetPixels</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cCTextBitmap<span class="token operator">-&gt;</span>width <span class="token operator">=</span> textWidth<span class="token punctuation">;</span>
    cCTextBitmap<span class="token operator">-&gt;</span>height <span class="token operator">=</span> textHeight<span class="token punctuation">;</span>
    <span class="token keyword">return</span> cCTextBitmap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加paddingH字段，让绘制时上下高度都扩充paddingH值<br> 修改后</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>CCTextBitmap<span class="token operator">*</span> <span class="token class-name">CCTextBitmap</span><span class="token double-colon punctuation">::</span><span class="token function">createCCTextBitmap</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">,</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pFontName<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> fontSize<span class="token punctuation">,</span>
            <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintA<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintR<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintG<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> fontTintB<span class="token punctuation">,</span>
            <span class="token keyword">const</span> Device<span class="token double-colon punctuation">::</span>TextAlign eAlignMask<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pWidth<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pHeight<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> shadow<span class="token punctuation">,</span>
            <span class="token keyword">const</span> <span class="token keyword">float</span> shadowDX<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> shadowDY<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> shadowBlur<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> stroke<span class="token punctuation">,</span>
            <span class="token keyword">const</span> <span class="token keyword">float</span> strokeR<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> strokeG<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> strokeB<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> strokeSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CCTextBitmap <span class="token operator">*</span>cCTextBitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CCTextBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Manages typographical styles, such as text orientation.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTypographyStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the text to be displayed from left to right.</span>
    <span class="token function">OH_Drawing_SetTypographyTextDirection</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle<span class="token punctuation">,</span> TEXT_DIRECTION_LTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> align <span class="token operator">=</span> <span class="token function">processTextAlign</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>eAlignMask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set text alignment</span>
    <span class="token function">OH_Drawing_SetTypographyTextAlign</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle<span class="token punctuation">,</span> align<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Used to load fonts</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_fontCollection <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateFontCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Creates a pointer to the OH_Drawing_TypographyCreate object</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTypographyHandler</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyStyle<span class="token punctuation">,</span>
		cCTextBitmap<span class="token operator">-&gt;</span>_fontCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Used to manage font colors, decorations, etc.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_textStyle <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Set Text Color</span>
    <span class="token function">OH_Drawing_SetTextStyleColor</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token function">OH_Drawing_ColorSetArgb</span><span class="token punctuation">(</span>fontTintA<span class="token punctuation">,</span> fontTintR<span class="token punctuation">,</span> fontTintG<span class="token punctuation">,</span> fontTintB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Set text size</span>
    <span class="token function">OH_Drawing_SetTextStyleFontSize</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> fontSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> DEFAULT_FONTSIZE <span class="token operator">:</span> fontSize<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token comment">// Set word weight</span>
    <span class="token function">OH_Drawing_SetTextStyleFontWeight</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> FONT_WEIGHT_400<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the font baseline position. TEXT_BASELINE_ALPHABotic is used to display phonetic characters and the baseline position is lower in the middle. TEXT_BASELINE_IDEOGRAPHIC for ideographic text with baseline at bottom</span>
    <span class="token function">OH_Drawing_SetTextStyleBaseLine</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> TEXT_BASELINE_ALPHABETIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set font height</span>
    <span class="token function">OH_Drawing_SetTextStyleFontHeight</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fontFamilies<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>pFontName<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the font type</span>
    <span class="token function">OH_Drawing_SetTextStyleFontFamilies</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fontFamilies<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set the font style. The font style is not italicized. FONT_EVEN_ITALIC Italic</span>
    <span class="token function">OH_Drawing_SetTextStyleFontStyle</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> FONT_STYLE_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Setting the Language Area</span>
    <span class="token function">OH_Drawing_SetTextStyleLocale</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">,</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Set the typesetting style</span>
    <span class="token function">OH_Drawing_TypographyHandlerPushTextStyle</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">,</span> cCTextBitmap<span class="token operator">-&gt;</span>_textStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set text content</span>
    <span class="token function">OH_Drawing_TypographyHandlerAddText</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Typesetting pop-up</span>
    <span class="token function">OH_Drawing_TypographyHandlerPopTextStyle</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Used to create OH_Drawing_Typography, which is used to manage the layout and display of typesetting.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_typography <span class="token operator">=</span> <span class="token function">OH_Drawing_CreateTypography</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typographyCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// The input width of the outer layer is preferentially used. If the input width is not used, the calculated width is used.</span>
    <span class="token keyword">int</span> layoutWidth <span class="token operator">=</span> pWidth<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pWidth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// In NAPI mode, call the ArkTS function to calculate the text width. Here, 400 is the word weight, which corresponds to the value of OH_Drawing_SetTextStyleFontWeight.</span>
        layoutWidth <span class="token operator">=</span> <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;StringUtils.getWidth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> fontSize<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// typographic layout, setting maximum text width</span>
    <span class="token function">OH_Drawing_TypographyLayout</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">,</span> layoutWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Obtains the maximum inherent width.</span>
    <span class="token keyword">int</span> realWidth <span class="token operator">=</span> <span class="token function">OH_Drawing_TypographyGetMaxIntrinsicWidth</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Obtaining the height</span>
    <span class="token keyword">int</span> realHeight <span class="token operator">=</span> <span class="token function">OH_Drawing_TypographyGetHeight</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> paddingH <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> textWidth <span class="token operator">=</span> <span class="token punctuation">(</span>pWidth <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> pWidth <span class="token operator">:</span> realWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> textHeight <span class="token operator">=</span> <span class="token punctuation">(</span>pHeight <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> pHeight <span class="token operator">:</span> realHeight<span class="token punctuation">)</span> <span class="token operator">+</span> paddingH <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token comment">// Format used to describe the bit pixel, including color type and transparency type.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_bitmap <span class="token operator">=</span> <span class="token function">OH_Drawing_BitmapCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// COLOR_FORMAT_RGBA_8888：Each pixel is represented by a 32-bit quantity. 8 bits indicate transparency, 8 bits indicate red, 8 bits indicate green, and 8 bits indicate blue.</span>
    <span class="token comment">// ALPHA_FORMAT_OPAQUE：Bitmap has no transparency</span>
    OH_Drawing_BitmapFormat cFormat <span class="token operator">=</span> <span class="token punctuation">{</span>COLOR_FORMAT_RGBA_8888<span class="token punctuation">,</span> ALPHA_FORMAT_OPAQUE<span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Initializes the width and height of the bitmap object, and sets the pixel format for the bitmap.</span>
    <span class="token function">OH_Drawing_BitmapBuild</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_bitmap<span class="token punctuation">,</span> textWidth<span class="token punctuation">,</span> textHeight <span class="token punctuation">,</span> <span class="token operator">&amp;</span>cFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Create a canvas object</span>
    cCTextBitmap<span class="token operator">-&gt;</span>_canvas <span class="token operator">=</span> <span class="token function">OH_Drawing_CanvasCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Bind a bitmap object to the canvas so that the content drawn on the canvas is output to the bitmap (i.e., CPU rendering).</span>
    <span class="token function">OH_Drawing_CanvasBind</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_canvas<span class="token punctuation">,</span> cCTextBitmap<span class="token operator">-&gt;</span>_bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">double</span> xStart <span class="token operator">=</span> <span class="token function">calxStartPosition</span><span class="token punctuation">(</span>align<span class="token punctuation">,</span> layoutWidth<span class="token punctuation">,</span> realWidth<span class="token punctuation">,</span> textWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> yStart <span class="token operator">=</span> <span class="token function">calyStartPosition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>eAlignMask<span class="token punctuation">,</span> realHeight<span class="token punctuation">,</span> textHeight<span class="token punctuation">)</span> <span class="token operator">+</span> paddingH<span class="token punctuation">;</span>
    <span class="token keyword">double</span> position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>xStart<span class="token punctuation">,</span> yStart<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// Uses the specified color to clear the canvas. OH_Drawing_ColorSetArgb: Converts four variables (respectively describing transparency, red, green, and blue) to a 32-bit (ARGB) variable that describes colors.</span>
    <span class="token function">OH_Drawing_CanvasClear</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_canvas<span class="token punctuation">,</span> <span class="token function">OH_Drawing_ColorSetArgb</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Display Text</span>
    <span class="token function">OH_Drawing_TypographyPaint</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_typography<span class="token punctuation">,</span> cCTextBitmap<span class="token operator">-&gt;</span>_canvas<span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">constexpr</span> <span class="token keyword">uint32_t</span> stride <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int32_t</span> addrSize <span class="token operator">=</span> pWidth <span class="token operator">*</span> pHeight <span class="token operator">*</span> stride<span class="token punctuation">;</span>
    <span class="token comment">// Obtains the pixel address of a specified bitmap. The pixel data of the bitmap can be obtained based on the pixel address.</span>
    cCTextBitmap<span class="token operator">-&gt;</span>pixelAddr <span class="token operator">=</span> <span class="token function">OH_Drawing_BitmapGetPixels</span><span class="token punctuation">(</span>cCTextBitmap<span class="token operator">-&gt;</span>_bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cCTextBitmap<span class="token operator">-&gt;</span>width <span class="token operator">=</span> textWidth<span class="token punctuation">;</span>
    cCTextBitmap<span class="token operator">-&gt;</span>height <span class="token operator">=</span> textHeight<span class="token punctuation">;</span>
    <span class="token keyword">return</span> cCTextBitmap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改鸿蒙editbox聚焦时-onkeyboardheightcallback函数多次被触发的问题" tabindex="-1"><a class="header-anchor" href="#修改鸿蒙editbox聚焦时-onkeyboardheightcallback函数多次被触发的问题" aria-hidden="true">#</a> 修改鸿蒙editbox聚焦时，onKeyboardHeightCallBack函数多次被触发的问题</h4><p>解决方案，在Quick-Cocos2dx-Community\\cocos\\ui\\UIEditBox\\UIEditBoxImpl-ohos.cpp中添加一个activeEditBoxIndex静态变量，并且只有触发onBeginCallBack时进行赋值，后续处理Quick-Cocos2dx-Community\\cocos\\platform\\ohos\\napi\\modules\\InputNapi.cpp<br> 中的keyboardHeightOnChangeCB函数时进行判断，如果当前触发的editbox的index和activeEditBoxIndex一致，才进行后续处理。</p><p>Quick-Cocos2dx-Community\\cocos\\ui\\UIEditBox\\UIEditBoxImpl-ohos.h文件修改如下</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__UIEDITBOXIMPLOHOS_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__UIEDITBOXIMPLOHOS_H__</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;platform/CCPlatformConfig.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>CC_TARGET_PLATFORM <span class="token operator">==</span> CC_PLATFORM_OHOS<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ui/UIEditBox/UIEditBoxImpl-common.h&quot;</span></span>

NS_CC_BEGIN

<span class="token keyword">class</span> <span class="token class-name">Label</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> ui <span class="token punctuation">{</span>

    <span class="token keyword">class</span> <span class="token class-name">EditBox</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name">EditBoxImplOhos</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">EditBoxImplCommon</span></span>
    <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment">/**
         * @js NA
         */</span>
        <span class="token function">EditBoxImplOhos</span><span class="token punctuation">(</span>EditBox<span class="token operator">*</span> pEditText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/**
         * @js NA
         * @lua NA
         */</span>
        <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">EditBoxImplOhos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">isEditing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">createNativeControl</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rect<span class="token operator">&amp;</span> frame<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeFont</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pFontName<span class="token punctuation">,</span> <span class="token keyword">int</span> fontSize<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeFontColor</span><span class="token punctuation">(</span><span class="token keyword">const</span> Color4B<span class="token operator">&amp;</span> color<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativePlaceholderFont</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pFontName<span class="token punctuation">,</span> <span class="token keyword">int</span> fontSize<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativePlaceholderFontColor</span><span class="token punctuation">(</span><span class="token keyword">const</span> Color4B<span class="token operator">&amp;</span> color<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeInputMode</span><span class="token punctuation">(</span>EditBox<span class="token double-colon punctuation">::</span>InputMode inputMode<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeInputFlag</span><span class="token punctuation">(</span>EditBox<span class="token double-colon punctuation">::</span>InputFlag inputFlag<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeReturnType</span><span class="token punctuation">(</span>EditBox<span class="token double-colon punctuation">::</span>KeyboardReturnType returnType<span class="token punctuation">)</span><span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeTextHorizontalAlignment</span><span class="token punctuation">(</span>cocos2d<span class="token double-colon punctuation">::</span>TextHAlignment alignment<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeText</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pText<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativePlaceHolder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pText<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeVisible</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">updateNativeFrame</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rect<span class="token operator">&amp;</span> rect<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getNativeDefaultFontName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">nativeOpenKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">nativeCloseKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxLength<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
        
        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onBeginCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onChangeCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onEnterCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onKeyboardHeightCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeTextVerticalAlignment</span><span class="token punctuation">(</span>cocos2d<span class="token double-colon punctuation">::</span>TextVAlignment alignment<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setNativeTextVisible</span><span class="token punctuation">(</span><span class="token keyword">bool</span> isVisible<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">virtual</span> <span class="token keyword">float</span> <span class="token function">getNativeChangeFieldHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">int</span> activeEditBoxIndex<span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">doAnimationWhenKeyboardMove</span><span class="token punctuation">(</span><span class="token keyword">float</span> duration<span class="token punctuation">,</span> <span class="token keyword">float</span> distance<span class="token punctuation">)</span><span class="token keyword">override</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> _editBoxIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token punctuation">}</span>


NS_CC_END

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* #if (CC_TARGET_PLATFORM == CC_PLATFORM_OHOS) */</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __UIEDITBOXIMPLOHOS_H__ */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quick-Cocos2dx-Community\\cocos\\ui\\UIEditBox\\UIEditBoxImpl-ohos.cpp文件修改如下</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ui/UIEditBox/UIEditBoxImpl-ohos.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>CC_TARGET_PLATFORM <span class="token operator">==</span> CC_PLATFORM_OHOS<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ui/UIEditBox/UIEditBox.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;2d/CCLabel.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;base/ccUTF8.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;math/Vec2.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ui/UIHelper.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;base/CCDirector.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;platform/CCFileUtils.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;platform/ohos/napi/helper/NapiHelper.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;platform/ohos/CCLogOhos.h&quot;</span></span>


NS_CC_BEGIN

<span class="token keyword">namespace</span> ui <span class="token punctuation">{</span>

    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> EditBoxImplOhos<span class="token operator">*</span><span class="token operator">&gt;</span> s_allEditBoxes<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> curIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> EditBoxImplOhos<span class="token double-colon punctuation">::</span>activeEditBoxIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    EditBoxImpl<span class="token operator">*</span> <span class="token function">__createSystemEditBox</span><span class="token punctuation">(</span>EditBox<span class="token operator">*</span> editBox<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">EditBoxImplOhos</span><span class="token punctuation">(</span>editBox<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">createNativeControl</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rect<span class="token operator">&amp;</span> frame<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">OHOS_LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;create textinput&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> director <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">Director</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> glView <span class="token operator">=</span> director<span class="token operator">-&gt;</span><span class="token function">getOpenGLView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> frameSize <span class="token operator">=</span> glView<span class="token operator">-&gt;</span><span class="token function">getFrameSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> winSize <span class="token operator">=</span> director<span class="token operator">-&gt;</span><span class="token function">getWinSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> leftBottom <span class="token operator">=</span> _editBox<span class="token operator">-&gt;</span><span class="token function">convertToWorldSpace</span><span class="token punctuation">(</span>Point<span class="token double-colon punctuation">::</span>ZERO<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> contentSize <span class="token operator">=</span> frame<span class="token punctuation">.</span>size<span class="token punctuation">;</span>
        <span class="token keyword">auto</span> rightTop <span class="token operator">=</span> _editBox<span class="token operator">-&gt;</span><span class="token function">convertToWorldSpace</span><span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>contentSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> contentSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> uiLeft <span class="token operator">=</span> frameSize<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>leftBottom<span class="token punctuation">.</span>x <span class="token operator">-</span> winSize<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> glView<span class="token operator">-&gt;</span><span class="token function">getScaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> uiTop <span class="token operator">=</span> frameSize<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token punctuation">(</span>rightTop<span class="token punctuation">.</span>y <span class="token operator">-</span> winSize<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> glView<span class="token operator">-&gt;</span><span class="token function">getScaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> uiWidth <span class="token operator">=</span> <span class="token punctuation">(</span>rightTop<span class="token punctuation">.</span>x <span class="token operator">-</span> leftBottom<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> glView<span class="token operator">-&gt;</span><span class="token function">getScaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> uiHeight <span class="token operator">=</span> <span class="token punctuation">(</span>rightTop<span class="token punctuation">.</span>y <span class="token operator">-</span> leftBottom<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> glView<span class="token operator">-&gt;</span><span class="token function">getScaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> paddingW <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> glView<span class="token operator">-&gt;</span><span class="token function">getScaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> paddingH <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>uiHeight <span class="token operator">*</span> <span class="token number">0.33f</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        s_allEditBoxes<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        _editBoxIndex <span class="token operator">=</span> curIndex<span class="token punctuation">;</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.createCocosEditBox&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> uiLeft<span class="token punctuation">,</span> uiTop<span class="token punctuation">,</span> uiWidth<span class="token punctuation">,</span> uiHeight<span class="token punctuation">,</span> paddingW<span class="token punctuation">,</span> paddingH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        curIndex<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">EditBoxImplOhos</span><span class="token punctuation">(</span>EditBox<span class="token operator">*</span> pEditText<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">EditBoxImplCommon</span><span class="token punctuation">(</span>pEditText<span class="token punctuation">)</span>
        <span class="token punctuation">,</span> <span class="token function">_editBoxIndex</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">EditBoxImplOhos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        s_allEditBoxes<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.removeCocosEditBox&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">isEditing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeText</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pText<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setCurrentText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> pText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeFont</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pFontName<span class="token punctuation">,</span> <span class="token keyword">int</span> fontSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> director <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">Director</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> glView <span class="token operator">=</span> director<span class="token operator">-&gt;</span><span class="token function">getOpenGLView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> isFontFileExists <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">FileUtils</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">isFileExist</span><span class="token punctuation">(</span>pFontName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string realFontPath <span class="token operator">=</span> pFontName<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFontFileExists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            realFontPath <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">FileUtils</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">fullPathForFilename</span><span class="token punctuation">(</span>pFontName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>realFontPath<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;rawfile/&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                realFontPath <span class="token operator">=</span> realFontPath<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">&quot;rawfile/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Chop out the &#39;assets/&#39; portion of the path.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">auto</span> realFontsize <span class="token operator">=</span> fontSize <span class="token operator">*</span> glView<span class="token operator">-&gt;</span><span class="token function">getScaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxFontSize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> realFontsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxFontPath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> realFontPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeFontColor</span><span class="token punctuation">(</span><span class="token keyword">const</span> Color4B<span class="token operator">&amp;</span> color<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxFontColor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>g<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativePlaceHolder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pText<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxPlaceHolder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> pText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativePlaceholderFont</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pFontName<span class="token punctuation">,</span> <span class="token keyword">int</span> fontSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> director <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">Director</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> glView <span class="token operator">=</span> director<span class="token operator">-&gt;</span><span class="token function">getOpenGLView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> isFontFileExists <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">FileUtils</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">isFileExist</span><span class="token punctuation">(</span>pFontName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string realFontPath <span class="token operator">=</span> pFontName<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFontFileExists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            realFontPath <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">FileUtils</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">fullPathForFilename</span><span class="token punctuation">(</span>pFontName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>realFontPath<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;rawfile/&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                realFontPath <span class="token operator">=</span> realFontPath<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">&quot;rawfile/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Chop out the &#39;assets/&#39; portion of the path.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">auto</span> realFontsize <span class="token operator">=</span> fontSize <span class="token operator">*</span> glView<span class="token operator">-&gt;</span><span class="token function">getScaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxPlaceHolderFontSize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> realFontsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxPlaceHolderFontPath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> realFontPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativePlaceholderFontColor</span><span class="token punctuation">(</span><span class="token keyword">const</span> Color4B<span class="token operator">&amp;</span> color<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxPlaceHolderFontColor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>g<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>color<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxLength<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxMaxLength&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> maxLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeInputMode</span><span class="token punctuation">(</span>EditBox<span class="token double-colon punctuation">::</span>InputMode inputMode<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setNativeInputMode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>inputMode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeInputFlag</span><span class="token punctuation">(</span>EditBox<span class="token double-colon punctuation">::</span>InputFlag inputFlag<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setNativeInputFlag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>inputFlag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeReturnType</span><span class="token punctuation">(</span>EditBox<span class="token double-colon punctuation">::</span>KeyboardReturnType returnType<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">OHOS_LOGW</span><span class="token punctuation">(</span><span class="token string">&quot;OHOS not support returnType %{public}d&quot;</span><span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeVisible</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxVisible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">updateNativeFrame</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rect<span class="token operator">&amp;</span> rect<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxViewRect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>rect<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">nativeOpenKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxVisible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">nativeCloseKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxVisible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_editBoxIndex<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onBeginCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">OHOS_LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;textinput editBoxEditingDidBegin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CCLOG</span><span class="token punctuation">(</span><span class="token string">&quot;EditBoxImplOhos onBeginCallBack:%i&quot;</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> it <span class="token operator">=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            activeEditBoxIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>
            s_allEditBoxes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">editBoxEditingDidBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onChangeCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> text<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">OHOS_LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;textinput onChangeCallBack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> it <span class="token operator">=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            s_allEditBoxes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">editBoxEditingChanged</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onEnterCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> text<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">OHOS_LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;textinput onEnterCallBack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSFunction</span><span class="token double-colon punctuation">::</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token string">&quot;CocosEditBox.setEditBoxVisible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> it <span class="token operator">=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            s_allEditBoxes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">editBoxEditingDidEnd</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
        
    <span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onKeyboardHeightCallBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">OHOS_LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;textinput onKeyboardHeightCallBack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> it <span class="token operator">=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> s_allEditBoxes<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">CCLOG</span><span class="token punctuation">(</span><span class="token string">&quot;EditBoxImplOhos onKeyboardHeightCallBack:%i&quot;</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            s_allEditBoxes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">getKeyboardInfo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">getNativeDefaultFontName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;sans-serif&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeTextVerticalAlignment</span><span class="token punctuation">(</span>cocos2d<span class="token double-colon punctuation">::</span>TextVAlignment alignment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">setNativeTextVisible</span><span class="token punctuation">(</span><span class="token keyword">bool</span> isVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">float</span> <span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">getNativeChangeFieldHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

NS_CC_END

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* #if (CC_TARGET_PLATFORM == CC_PLATFORM_OHOS) */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quick-Cocos2dx-Community\\cocos\\platform\\ohos\\napi\\modules\\InputNapi.cpp文件修改如下</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//</span>
<span class="token comment">// Created on 2023/4/19.</span>
<span class="token comment">//</span>
<span class="token comment">// Node APIs are not fully supported. To solve the compilation error of the interface cannot be found,</span>
<span class="token comment">// please include &quot;napi/native_api.h&quot;.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;js_native_api.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;js_native_api_types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;InputNapi.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;platform/ohos/napi/plugin_manager.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../../CCLogOhos.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ui/UIEditBox/UIEditBoxImpl-ohos.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;base/CCIMEDispatcher.h&quot;</span></span>

napi_value <span class="token class-name">InputNapi</span><span class="token double-colon punctuation">::</span><span class="token function">editBoxOnFocusCB</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">OHOS_LOGI</span><span class="token punctuation">(</span><span class="token string">&quot;InputNapi::editBoxOnFocusCB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    napi_status status<span class="token punctuation">;</span>
    size_t argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    napi_value args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    napi_valuetype valuetype<span class="token punctuation">;</span>
    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int32_t</span> index<span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cocos2d<span class="token double-colon punctuation">::</span>ui<span class="token double-colon punctuation">::</span><span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onBeginCallBack</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

napi_value <span class="token class-name">InputNapi</span><span class="token double-colon punctuation">::</span><span class="token function">editBoxOnChangeCB</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">OHOS_LOGI</span><span class="token punctuation">(</span><span class="token string">&quot;InputNapi::editBoxOnChangeCB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    napi_status status<span class="token punctuation">;</span>
    size_t argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    napi_valuetype valuetype<span class="token punctuation">;</span>
    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int32_t</span> index<span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t pInt<span class="token punctuation">;</span>
    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cocos2d<span class="token double-colon punctuation">::</span>ui<span class="token double-colon punctuation">::</span><span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onChangeCallBack</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

napi_value <span class="token class-name">InputNapi</span><span class="token double-colon punctuation">::</span><span class="token function">keyboardHeightOnChangeCB</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">OHOS_LOGI</span><span class="token punctuation">(</span><span class="token string">&quot;InputNapi::keyboardHeightOnChangeCB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    napi_status status<span class="token punctuation">;</span>
    size_t argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    napi_valuetype valuetype<span class="token punctuation">;</span>

    <span class="token comment">// 检查第一个参数是否为数字</span>
    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;First argument must be a number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 检查第二个参数是否为数字（替换之前的字符串类型）</span>
    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Second argument must be a number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取第一个参数的数值</span>
    <span class="token keyword">int32_t</span> index<span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取第二个参数的数值（改为获取整数）</span>
    <span class="token keyword">int32_t</span> intValue<span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>intValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用回调，将两个整数传递进去</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> cocos2d<span class="token double-colon punctuation">::</span>ui<span class="token double-colon punctuation">::</span>EditBoxImplOhos<span class="token double-colon punctuation">::</span>activeEditBoxIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cocos2d<span class="token double-colon punctuation">::</span>ui<span class="token double-colon punctuation">::</span><span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onKeyboardHeightCallBack</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> intValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

napi_value <span class="token class-name">InputNapi</span><span class="token double-colon punctuation">::</span><span class="token function">editBoxOnEnterCB</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    napi_status status<span class="token punctuation">;</span>
    size_t argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    napi_valuetype valuetype<span class="token punctuation">;</span>
    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int32_t</span> index<span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t pInt<span class="token punctuation">;</span>
    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cocos2d<span class="token double-colon punctuation">::</span>ui<span class="token double-colon punctuation">::</span><span class="token class-name">EditBoxImplOhos</span><span class="token double-colon punctuation">::</span><span class="token function">onEnterCallBack</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

napi_value <span class="token class-name">InputNapi</span><span class="token double-colon punctuation">::</span><span class="token function">textFieldTTFOnChangeCB</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    napi_status status<span class="token punctuation">;</span>
    size_t argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    napi_value args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    napi_valuetype valuetype<span class="token punctuation">;</span>
    status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype <span class="token operator">!=</span> napi_string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> oldStr <span class="token operator">=</span> cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">IMEDispatcher</span><span class="token double-colon punctuation">::</span><span class="token function">sharedDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getContentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t pInt<span class="token punctuation">;</span>
    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算出差异位置</span>
    <span class="token keyword">int</span> oldIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> newIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>oldIndex <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> newIndex <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> text<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        oldIndex<span class="token operator">++</span><span class="token punctuation">;</span>
        newIndex<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 删除原字符串差异位置之后的字符</span>
    <span class="token keyword">int</span> oldLength <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> oldIndex <span class="token operator">&lt;</span> oldLength<span class="token punctuation">;</span> oldIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">IMEDispatcher</span><span class="token double-colon punctuation">::</span><span class="token function">sharedDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">dispatchDeleteBackward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 截取新字符串差异位置后的部分，并插入</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">&gt;</span> newIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string <span class="token function">newStr</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> modify <span class="token operator">=</span> newStr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>newIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cocos2d<span class="token double-colon punctuation">::</span><span class="token class-name">IMEDispatcher</span><span class="token double-colon punctuation">::</span><span class="token function">sharedDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">dispatchInsertText</span><span class="token punctuation">(</span>modify<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>modify<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function c(i,l){return s(),a("div",null,[t(" more "),e])}const r=n(o,[["render",c],["__file","cocos2dx-lua鸿蒙问题修改.html.vue"]]);export{r as default};
