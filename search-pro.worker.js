const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":43,\"nextId\":43,\"documentIds\":{\"0\":\"v-404d0efa\",\"1\":\"v-404d0efa#cocoscreator2-x\",\"2\":\"v-404d0efa#cocoscreator3-x\",\"3\":\"v-404d0efa#ccc-shader学习\",\"4\":\"v-404d0efa#其他\",\"5\":\"v-1b6983a0\",\"6\":\"v-1b6983a0@0\",\"7\":\"v-2ffb6dc4\",\"8\":\"v-2ffb6dc4@0\",\"9\":\"v-35e5e756\",\"10\":\"v-35e5e756@0\",\"11\":\"v-4ca7f96e\",\"12\":\"v-4ca7f96e@0\",\"13\":\"v-77264f86\",\"14\":\"v-77264f86@0\",\"15\":\"v-673dc1db\",\"16\":\"v-673dc1db@0\",\"17\":\"v-720e5741\",\"18\":\"v-720e5741@0\",\"19\":\"v-32349183\",\"20\":\"v-32349183#分享一些学习的网站\",\"21\":\"v-32349183#opengl文档\",\"22\":\"v-32349183#webgl-理论基础\",\"23\":\"v-32349183#shader编写案例-可参考后自己修改\",\"24\":\"v-32349183#opengl4接口和方法\",\"25\":\"v-32349183#对3d有帮助的书籍汇总\",\"26\":\"v-32349183@0\",\"27\":\"v-5a612eac\",\"28\":\"v-5a612eac@0\",\"29\":\"v-0bb27493\",\"30\":\"v-0bb27493@0\",\"31\":\"v-5bba85ea\",\"32\":\"v-5bba85ea@0\",\"33\":\"v-39e11e62\",\"34\":\"v-39e11e62#环境\",\"35\":\"v-39e11e62#代码\",\"36\":\"v-39e11e62@0\",\"37\":\"v-3c95f7bf\",\"38\":\"v-3c95f7bf@0\",\"39\":\"v-3dce2c34\",\"40\":\"v-927fbb34\",\"41\":\"v-9280a3f2\",\"42\":\"v-c35dbb32\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[2],\"2\":[2],\"3\":[2],\"4\":[1],\"5\":[2,287],\"6\":[null,null,2],\"7\":[1,121],\"8\":[null,null,2],\"9\":[1,124],\"10\":[null,null,2],\"11\":[2,154],\"12\":[null,null,2],\"13\":[2,176],\"14\":[null,null,2],\"15\":[2,163],\"16\":[null,null,2],\"17\":[2,66],\"18\":[null,null,2],\"19\":[1],\"20\":[1],\"21\":[1,6],\"22\":[2,8],\"23\":[3,5],\"24\":[1,10],\"25\":[2,53],\"26\":[null,null,2],\"27\":[1,37],\"28\":[null,null,2],\"29\":[1,83],\"30\":[null,null,2],\"31\":[1,37],\"32\":[null,null,2],\"33\":[1,4],\"34\":[1,5],\"35\":[1,53],\"36\":[null,null,1],\"37\":[1,200],\"38\":[null,null,1],\"39\":[2],\"40\":[3],\"41\":[3],\"42\":[1]},\"averageFieldLength\":[1.5717013168116987,68.01901993685912,1.0678122750300392],\"storedFields\":{\"0\":{\"h\":\"游戏相关\"},\"1\":{\"h\":\"cocosCreator2.x\"},\"2\":{\"h\":\"cocosCreator3.x\"},\"3\":{\"h\":\"ccc_shader学习\"},\"4\":{\"h\":\"其他\"},\"5\":{\"h\":\"从零开始-2d\",\"t\":[\"编写第一个shader文件 首先在编辑器下创建一个简单的着色器和材质，因为3.0中大部分的着色器是3D的，我们先从2d开始，所以我们可以把着色器代码先修改成cocos默认的sprite着色器代码,然后赋值给材质并把材质赋给一个2dSprite，着色器代码如下\",\"// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd. CCEffect %{ techniques: - passes: - vert: sprite-vs:vert frag: sprite-fs:frag depthStencilState: depthTest: false depthWrite: false blendState: targets: - blend: true blendSrc: src_alpha blendDst: one_minus_src_alpha blendDstAlpha: one_minus_src_alpha rasterizerState: cullMode: none properties: alphaThreshold: { value: 0.5 } }% CCProgram sprite-vs %{ precision highp float; #include <cc-global> #if USE_LOCAL #include <cc-local> #endif #if SAMPLE_FROM_RT #include <common> #endif in vec3 a_position; in vec2 a_texCoord; in vec4 a_color; out vec4 color; out vec2 uv0; vec4 vert () { vec4 pos = vec4(a_position, 1); #if USE_LOCAL pos = cc_matWorld * pos; #endif #if USE_PIXEL_ALIGNMENT pos = cc_matView * pos; pos.xyz = floor(pos.xyz); pos = cc_matProj * pos; #else pos = cc_matViewProj * pos; #endif uv0 = a_texCoord; #if SAMPLE_FROM_RT CC_HANDLE_RT_SAMPLE_FLIP(uv0); #endif color = a_color; return pos; } }% CCProgram sprite-fs %{ precision highp float; #include <embedded-alpha> #include <alpha-test> in vec4 color; #if USE_TEXTURE in vec2 uv0; #pragma builtin(local) layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture; #endif vec4 frag () { vec4 o = vec4(1, 1, 1, 1); #if USE_TEXTURE o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); #if IS_GRAY float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b; o.r = o.g = o.b = gray; #endif #endif o *= color; ALPHA_TEST(o); return o; } }% \",\"以上内容是内置sprite的effect代码，语法和结构可先阅读以下4条文档\",\"1.yaml语法 https://docs.cocos.com/creator/manual/zh/material-system/yaml-101.html 2.effect结构 https://docs.cocos.com/creator/manual/zh/material-system/effect-syntax.html 3.Pass 可选配置参数 https://docs.cocos.com/creator/manual/zh/material-system/pass-parameter-list.html 4.常用 shader 内置 Uniform https://docs.cocos.com/creator/manual/zh/material-system/builtin-shader-uniforms.html \",\"这一段代码中，通过学习，我们知道可以去修改sprite-fs里的frag来实现一些效果\",\" vec4 frag () { vec4 o = vec4(1, 1, 1, 1); #if USE_TEXTURE o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); #if IS_GRAY float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b; o.r = o.g = o.b = gray; #endif #endif o *= color; ALPHA_TEST(o); return o; } \",\"这一段里，我们发现他主要用到了一个CCSampleWithAlphaSeparated和ALPHA_TEST的方法，这两个方法，我们可以看到是导入的内置的着色器片段的方法（ embedded-alpha和 alpha-test），这里我们不过多深究，我们先尝试将frag函数进行一个简单的修改并用于我们测试的图片上，这里需要注意的是，使用自定义shader的图片，不要勾选自动合图，否则打包后可能没有对应的shader效果。\",\"首先我们将frag函数进行一个简单的修改，让原本的图片不显示纹理，只显示一个绿色\",\"vec4 frag () { vec4 o = vec4(0.,1 , 0., 1); o *= color; ALPHA_TEST(o); return o; } \",\"但是我们知道，其实我们最重要的有时候还是需要显示图片的纹理，这时候，我们可以将定义的o和纹理进行一个简单的融合\",\" vec4 o = vec4(0,1,0,1); #if USE_TEXTURE o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); #endif o *= color; ALPHA_TEST(o); return o; \",\"这个操作很简单，我们只是将初始的绿色在有纹理的时候和纹理进行了一个融合，并且最后融入sprite组件自带的color颜色，这样我们便得到了变成绿色的纹理图片。但其实，只是改变图片融合的颜色，其实最后o*=color，cocos就给我们预留了颜色处理的逻辑，所以我们可以考虑，是不是可以干一点别的事情，还是修改o然后和纹理进行一个融合。\",\"接下来，我们会用到openGL函数clamp，这个函数是区间限定函数 简单介绍一下clamp(x,low,high )若X在[low,high]范围内，则等于X；如果X小于low，则返回low；如果X大于high，则返回high\",\"我们先写一个函数，主要是通过传入的uv来进行一个区间限定最后返回一个num，然乎我们把这个num定为o的透明度，看看图片有什么变化：\",\" float getNum(vec2 uv){ return clamp(uv0.x,0.0,1.0); } vec4 frag () { vec4 o = vec4(1,1,1,1); #if USE_TEXTURE float num=getNum(uv0); o = vec4(1,1, 1, num); o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); #endif o *= color; ALPHA_TEST(o); return o; } \",\"这时候我们发现我们测试的图片从左往右透明度逐渐发生了变化。 既然可以修改透明度，那么我们接下来尝试做一个圆形头像的遮罩。 首先，我们必须要让距离中心点为一半的都是可见的，于是我们大致可以先写出一个函数，这里引用了另一个函数distance，计算两点之间的距离 那么我们可以把getNum函数改成如下：\",\"float getNum(vec2 uv){ return clamp((.5-distance(uv,vec2(.5))),0.0,1.0); } \",\"计算uv到中心点的距离，当距离大于.5的时候，此时相减为负数，取最小值则是0，那么这一圈是不可见的，但是这样减出来，数值在0-1之间的，会导致透明度保持原数值，会比较低，这样，我们必须要让正值都大于1才能取到1，所以，我们修改一下，让(.5-distance(uv,vec2(.5)))的值再大一点，尽可能不在0-1之间， 我们把(.5-distance(uv,vec2(.5)))/0.01,发现效果还可以，这样，一个圆形头像遮罩就完成了。 代码如下：\",\"// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd. CCEffect %{ techniques: - passes: - vert: sprite-vs:vert frag: sprite-fs:frag depthStencilState: depthTest: false depthWrite: false blendState: targets: - blend: true blendSrc: src_alpha blendDst: one_minus_src_alpha blendDstAlpha: one_minus_src_alpha rasterizerState: cullMode: none properties: alphaThreshold: { value: 0.5 } }% CCProgram sprite-vs %{ precision highp float; #include <cc-global> #if USE_LOCAL #include <cc-local> #endif #if SAMPLE_FROM_RT #include <common> #endif in vec3 a_position; in vec2 a_texCoord; in vec4 a_color; out vec4 color; out vec2 uv0; vec4 vert () { vec4 pos = vec4(a_position, 1); #if USE_LOCAL pos = cc_matWorld * pos; #endif #if USE_PIXEL_ALIGNMENT pos = cc_matView * pos; pos.xyz = floor(pos.xyz); pos = cc_matProj * pos; #else pos = cc_matViewProj * pos; #endif uv0 = a_texCoord; #if SAMPLE_FROM_RT CC_HANDLE_RT_SAMPLE_FLIP(uv0); #endif color = a_color; return pos; } }% CCProgram sprite-fs %{ precision highp float; #include <embedded-alpha> #include <alpha-test> in vec4 color; #if USE_TEXTURE in vec2 uv0; #pragma builtin(local) layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture; #endif float getNum(vec2 uv){ return clamp((.5-distance(uv,vec2(.5)))/0.01,0.0,1.0); } vec4 frag () { vec4 o = vec4(1,1,1,1); #if USE_TEXTURE float num=getNum(uv0); o = vec4(1,1, 1, num); o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); #endif o *= color; ALPHA_TEST(o); return o; } }% \",\"接下来，我们尝试更改一下ditance里的距离点的位置，探索一下好玩的东西，那么我们定义一个变量来让这个点可以被修改把 我们在 properties里添加两个属性\",\" valueX: { value: 0.5 } valueY: { value: 0.5 } \",\"并在sprite-fs 接收这两个值\",\" uniform Constant{ float valueX; float valueY; }; \",\"这时候我们就可以在编辑器看到材质里，有这两个参数，并且可以被修改 那么我们就写个脚本来修改这两个值，尝试用代码控制shader 这里，我们需要把精灵的锚点改到左下角，方便计算触摸点在图片上的比例，然后我们编写一个touchMove函数并把脚本绑定在节点下 脚本代码如下\",\" touchMove(target: EventTouch) { let points = v3(target.getUILocation().x, target.getUILocation().y, 0); let width = this.node.getComponent(UITransform).width; let height = this.node.getComponent(UITransform).height; let point = this.node.getComponent(UITransform).convertToNodeSpaceAR(points); point.x = point.x < 0 ? 0 : point.x; point.y = point.y < 0 ? 0 : point.y; point.x = point.x > width ? width : point.x; point.y = point.y > height ? height : point.y; this.node.getComponent(Sprite).customMaterial.setProperty(\\\"valueX\\\", point.x / width); this.node.getComponent(Sprite).customMaterial.setProperty(\\\"valueY\\\", 1 - point.y / height); } \"]},\"6\":{\"c\":[\"ccc_shader学习\"]},\"7\":{\"h\":\"图片溶解\",\"t\":[\"图片溶解\",\"// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd. CCEffect %{ techniques: - passes: - vert: sprite-vs:vert frag: sprite-fs:frag depthStencilState: depthTest: false depthWrite: false blendState: targets: - blend: true blendSrc: src_alpha blendDst: one_minus_src_alpha blendDstAlpha: one_minus_src_alpha rasterizerState: cullMode: none properties: alphaThreshold: { value: 0.5 } # 自定义参数 # 溶解比例 fade_pct: { value: 1.0, editor: { tooltip: \\\"溶解比例\\\" } } }% CCProgram sprite-vs %{ precision highp float; #include <cc-global> #if USE_LOCAL #include <cc-local> #endif in vec3 a_position; in vec2 a_texCoord; in vec4 a_color; out vec4 v_color; out vec2 v_uv0; #if USE_TEXTURE in vec2 a_uv0; #endif vec4 vert () { vec4 pos = vec4(a_position, 1); #if USE_LOCAL pos = cc_matWorld * pos; #endif #if USE_PIXEL_ALIGNMENT pos = cc_matView * pos; pos.xyz = floor(pos.xyz); pos = cc_matProj * pos; #else pos = cc_matViewProj * pos; #endif #if USE_TEXTURE v_uv0 = a_uv0; #endif v_color = a_color; v_uv0 = a_texCoord; return pos; } }% CCProgram sprite-fs %{ precision highp float; #include <embedded-alpha> #include <alpha-test> in vec4 v_color; #if USE_TEXTURE in vec2 v_uv0; #pragma builtin(local) layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture; #endif uniform ARGS { float fade_pct; }; vec4 frag () { vec4 o = vec4(1, 1, 1, 1); o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0); #if USE_TEXTURE #if CC_USE_ALPHA_ATLAS_TEXTURE o.a *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r; // o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r; #endif #endif // 当颜色小于溶解的程度，则直接抛弃 if(o.b < fade_pct) discard; if(o.b < fade_pct + 0.1) { // 对溶解的边缘做处理，变色或者改透明度等等 o = o * vec4(0.92, 0.8, 0.95, o.a); } return o; } }% \"]},\"8\":{\"c\":[\"ccc_shader学习\"]},\"9\":{\"h\":\"头像遮罩\",\"t\":[\"官方提供的头像框遮罩shader，适合宽高比不同的图片\",\"CCEffect %{ techniques: - passes: - vert: sprite-vs:vert frag: sprite-fs:frag depthStencilState: depthTest: false depthWrite: false blendState: targets: - blend: true blendSrc: src_alpha blendDst: one_minus_src_alpha blendDstAlpha: one_minus_src_alpha rasterizerState: cullMode: none properties: alphaThreshold: { value: 0.5 } # 自定义参数 wh_ratio: { value: 1, editor: { tooltip: \\\"宽高比\\\" } } blur: { value: 0.01, editor: { tooltip: \\\"光圈模糊程度\\\" } } radius: { value: 0.5, editor: { tooltip: \\\"光圈半径\\\" } } center: { value: [0.5, 0.5], editor: { tooltip: \\\"光圈起点\\\" } } }% CCProgram sprite-vs %{ precision highp float; #include <cc-global> #if USE_LOCAL #include <cc-local> #endif in vec3 a_position; in vec2 a_texCoord; in vec4 a_color; out vec4 v_color; out vec2 v_uv0; #if USE_TEXTURE in vec2 a_uv0; #endif vec4 vert () { vec4 pos = vec4(a_position, 1); #if USE_LOCAL pos = cc_matWorld * pos; #endif #if USE_PIXEL_ALIGNMENT pos = cc_matView * pos; pos.xyz = floor(pos.xyz); pos = cc_matProj * pos; #else pos = cc_matViewProj * pos; #endif #if USE_TEXTURE v_uv0 = a_uv0; #endif v_color = a_color; v_uv0 = a_texCoord; return pos; } }% CCProgram sprite-fs %{ precision highp float; #include <embedded-alpha> #include <alpha-test> in vec4 v_color; in vec2 v_uv0; #if USE_TEXTURE #pragma builtin(local) layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture; #endif uniform ARGS{ float radius; float blur; vec2 center; float wh_ratio; }; vec4 frag () { vec4 o = vec4(1, 1, 1, 1); o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0); o *= v_color; ALPHA_TEST(o); // 圆心在纹理中心 vec2(0.5, 0.5), 让让圆心距离超过半径的像素丢弃或者透明度设置为0 float circle = radius * radius; float rx = center.x * wh_ratio; float ry = center.y; float uv_x = v_uv0.x * wh_ratio; float uv_y = v_uv0.y; // 使用勾股定理计算圆外的像素 float a2 = (uv_x - rx) * (uv_x - rx); float b2 = (uv_y - ry) * (uv_y - ry); float dis = a2 + b2; // 使用内部插值函数 smoothstep(min, max, x) 优化边缘锯齿，达到边缘羽化效果 o.a = smoothstep(circle, circle - blur, dis) * o.a; return o; } }% \"]},\"10\":{\"c\":[\"ccc_shader学习\"]},\"11\":{\"h\":\"对effect代码的详细解释和精简-3d\",\"t\":[\"简单总结一些shader内容 我们以3.4.1为例子，我们新建了一个3d的effect来看下3d相关的shader\",\"CCEffect %{ techniques: - name: opaque passes: - vert: general-vs:vert # builtin header frag: unlit-fs:frag properties: &props mainTexture: { value: white } mainColor: { value: [1, 1, 1, 1], editor: { type: color } } - name: transparent passes: - vert: general-vs:vert # builtin header frag: unlit-fs:frag blendState: targets: - blend: true blendSrc: src_alpha blendDst: one_minus_src_alpha blendSrcAlpha: src_alpha blendDstAlpha: one_minus_src_alpha properties: *props }% CCProgram unlit-fs %{ precision highp float; #include <output> #include <cc-fog-fs> in vec2 v_uv; in vec3 v_position; uniform sampler2D mainTexture; uniform Constant { vec4 mainColor; }; vec4 frag () { vec4 col = mainColor * texture(mainTexture, v_uv); CC_APPLY_FOG(col, v_position); return CCFragOutput(col); } }% \",\"我们尝试编写把他修改成最简单的一个shader文件，作为编写模板\",\" CCEffect %{ techniques: - name: opaque passes: - vert: unlit-vs:vert #指定顶点着色器 frag: unlit-fs:frag #指定像素着色器 properties: &props migrations: &migrations properties: }% CCProgram unlit-vs %{ //定义默认精度 precision highp float; #include <input> #include <cc-global> #include <cc-local-batch> vec4 vert(){ //获取顶点位置位置信息，本地坐标系 vec4 position; CCVertInput(position); //获取世界矩阵 mat4 matWorld; CCGetWorldMatrix(matWorld); //cc_matProj 投影矩阵 //cc_matView 摄像机矩阵 //matWorld 世界矩阵 /** 根据矩阵变换规则，顶点需要经过如下变换 本地空间 -> 世界空间 -> 摄像机空间 -> 投影 下面的代码是左乘，原因在于position为行向量，且矩阵为行矩阵 注： 虽然在openGL或者webGL中默认是列向量和列矩阵 但是由于显卡一个寄存器是4分量，刚好可以存储一个行向量 所以向量和矩阵在显卡里面是按行向量存储的，D3D采用行矩阵和行向量就是迎合显卡特性 */ //输出位置 return cc_matProj*(cc_matView*matWorld)*position; } }% CCProgram unlit-fs %{ //定义默认精度 precision highp float; #include <output> vec4 frag () { //声明一个颜色 vec4 col =vec4(1,0,1,1); //输出颜色 return CCFragOutput(col); } }% \",\"我们从模板出发往回推，发现顶点着色器cocos已经帮我们写好一个比较详细的了，这里我们可以把代码再次精简，用cocos自带的顶点着色器片段（一般来说顶点着色器修改小） 修改后的代码\",\" CCEffect %{ techniques: - name: opaque passes: - vert: general-vs:vert #指定顶点着色器 frag: unlit-fs:frag #指定像素着色器 properties: &props migrations: &migrations properties: }% CCProgram unlit-fs %{ //定义默认精度 precision highp float; #include <output> in vec2 v_uv; uniform sampler2D mainTexture; vec4 frag () { //声明一个颜色 vec4 col =vec4(1,1,1,1); //输出颜色 return CCFragOutput(col); } }% \",\"这里我们也贴一下内置的顶点着色器代码片段，方便后续查询 同时他暴露的参数后续在像素着色器里也是可以使用的\",\"precision highp float; #include <input-standard> #include <cc-global> #include <cc-local-batch> #include <input-standard> #include <cc-fog-vs> #include <cc-shadow-map-vs> in vec4 a_color; #if HAS_SECOND_UV in vec2 a_texCoord1; #endif out vec3 v_position; out vec3 v_normal; out vec3 v_tangent; out vec3 v_bitangent; out vec2 v_uv; out vec2 v_uv1; out vec4 v_color; vec4 vert () { StandardVertInput In; CCVertInput(In); mat4 matWorld, matWorldIT; CCGetWorldMatrixFull(matWorld, matWorldIT); vec4 pos = matWorld * In.position; v_position = pos.xyz; v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz); v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz); v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order v_uv = a_texCoord; #if HAS_SECOND_UV v_uv1 = a_texCoord1; #endif v_color = a_color; CC_TRANSFER_FOG(pos); CC_TRANSFER_SHADOW(pos); return cc_matProj * (cc_matView * matWorld) * In.position; } \"]},\"12\":{\"c\":[\"ccc_shader学习\"]},\"13\":{\"h\":\"扫光效果-2d\",\"t\":[\"2d 扫光效果\",\"// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd. CCEffect %{ techniques: - passes: - vert: sprite-vs:vert frag: sprite-fs:frag depthStencilState: depthTest: false depthWrite: false blendState: targets: - blend: true blendSrc: src_alpha blendDst: one_minus_src_alpha blendDstAlpha: one_minus_src_alpha rasterizerState: cullMode: none properties: alphaThreshold: { value: 0.5 } addColor: { value: [1,1,1,1 ] , editor: {type: color } } anchorPoint: { value : [ .5,.5]} rotation: { value: 45.0, editor: { tooltip: \\\"光束倾斜角度\\\", range: [0.0, 360.0], } } lightWidth : { value : .5} }% CCProgram sprite-vs %{ precision highp float; #include <cc-global> #if USE_LOCAL #include <cc-local> #endif #if SAMPLE_FROM_RT #include <common> #endif in vec3 a_position; in vec2 a_texCoord; in vec4 a_color; out vec4 color; out vec2 uv0; vec4 vert () { vec4 pos = vec4(a_position, 1); #if USE_LOCAL pos = cc_matWorld * pos; #endif #if USE_PIXEL_ALIGNMENT pos = cc_matView * pos; pos.xyz = floor(pos.xyz); pos = cc_matProj * pos; #else pos = cc_matViewProj * pos; #endif uv0 = a_texCoord; #if SAMPLE_FROM_RT CC_HANDLE_RT_SAMPLE_FLIP(uv0); #endif color = a_color; return pos; } }% CCProgram sprite-fs %{ precision highp float; #include <embedded-alpha> #include <alpha-test> #include <cc-global> in vec4 color; uniform Constant { vec4 addColor; vec2 anchorPoint; float rotation; float lightWidth; // float enableFog; // float cropAlpha; // float enableGradient; }; #if USE_TEXTURE in vec2 uv0; #pragma builtin(local) layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture; #endif vec4 addLightColor(vec4 textureColor, vec4 lightColor, vec2 lightCenterPoint, float lightAngle, float lightWidth) { // 边界值处理，没有宽度就返回原始颜色 #if USE_TEXTURE if (lightWidth <= 0.0) { return textureColor; } // 计算当前 uv 到 光束 的距离 float angleInRadians = radians(lightAngle); // 角度0与非0不同处理 float dis = 0.0; if (mod(lightAngle, 180.0) != 0.0) { // 计算光束中心线下方与X轴交点的X坐标 // 1.0 - lightCenterPoint.y 是将转换为OpenGL坐标系，下文的 1.0 - y 类似 float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians)); // 以当前点画一条平行于X轴的线，假设此线和光束中心线相交的点为D点 // 那么 // D.y = uv0.y // D.x = lightOffsetX + D.y / tan(angle) float dx = lightOffsetX + (1.0 - uv0.y) / tan(angleInRadians); // D 到当前 uv0 的距离就是 // dis = |uv0.x - D.x| float offsetDis = abs(uv0.x - dx); // 当前点到光束中心线的的垂直距离就好算了 dis = sin(angleInRadians) * offsetDis; } else { dis = abs(uv0.y - lightCenterPoint.y); } float a = 1.0 ; // 裁剪掉透明区域上的点光 #if cropAlpha a *= step(0.01, textureColor.a); #endif // 裁剪掉光束范围外的uv（迷雾效果） #if enableFog a *= step(dis, lightWidth * 0.5); #endif // 加入从中心往外渐变的效果 #if enableGradient a *= 1.0 - dis / (lightWidth * 0.5); #endif // 计算出扩散范围内，不同 uv 对应的实际扩散颜色值 vec4 finalLightColor = lightColor * a; // 混合颜色：在原始图像颜色上叠加扩散颜色 return textureColor * textureColor.a + finalLightColor; #endif } vec4 frag () { vec4 o = vec4(1, 1, 1, 1); #if USE_TEXTURE o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); o=addLightColor(o,addColor,anchorPoint,rotation,lightWidth); #endif o *= color; ALPHA_TEST(o); return o; } }% \"]},\"14\":{\"c\":[\"ccc_shader学习\"]},\"15\":{\"h\":\"放大镜效果-2d\",\"t\":[\"// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd. CCEffect %{ techniques: - passes: - vert: sprite-vs:vert frag: sprite-fs:frag depthStencilState: depthTest: false depthWrite: false blendState: targets: - blend: true blendSrc: src_alpha blendDst: one_minus_src_alpha blendDstAlpha: one_minus_src_alpha rasterizerState: cullMode: none properties: alphaThreshold: { value: 0.5 } magnifierCenterPoint: { value: [0.2, 0.2], editor: { tooltip: \\\"放大镜中心点坐标\\\" } } magnifierRadius: { value: 0.5, editor: { tooltip: \\\"放大镜半径\\\" } } magnifierScale: { value: 0.6, editor: { tooltip: \\\"放大镜倍数\\\" } } nodeTextureProportion: { value: 0.56, editor: { tooltip: \\\"节点宽高比比例\\\" } } }% CCProgram sprite-vs %{ precision highp float; #include <cc-global> #if USE_LOCAL #include <cc-local> #endif #if SAMPLE_FROM_RT #include <common> #endif in vec3 a_position; in vec2 a_texCoord; in vec4 a_color; out vec4 color; out vec2 uv0; vec4 vert () { vec4 pos = vec4(a_position, 1); #if USE_LOCAL pos = cc_matWorld * pos; #endif #if USE_PIXEL_ALIGNMENT pos = cc_matView * pos; pos.xyz = floor(pos.xyz); pos = cc_matProj * pos; #else pos = cc_matViewProj * pos; #endif uv0 = a_texCoord; #if SAMPLE_FROM_RT CC_HANDLE_RT_SAMPLE_FLIP(uv0); #endif color = a_color; return pos; } }% CCProgram sprite-fs %{ precision highp float; #include <embedded-alpha> #include <alpha-test> #include <cc-global> in vec4 color; uniform Magnifier { // 放大镜中心点坐标 vec2 magnifierCenterPoint; // 放大镜半径 float magnifierRadius; // 放大镜放大倍数 float magnifierScale; // 节点的宽高比 float nodeTextureProportion; }; #if USE_TEXTURE in vec2 uv0; #pragma builtin(local) layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture; #endif // 缩放中心点 const vec2 centerPoint = vec2(0.5, 0.75); // 缩放比例 const float scaleDegree = 0.6; // 展示缩放距离中心点的位置 const float toCenterDis = 0.3; // 图片宽高比 const float textureProportion = 0.56; // 获得应该渲染的纹理位置 vec2 getTextPos(vec2 uv, vec2 center, float scale, float degree){ vec2 tPos = uv; tPos.x = (uv.x - center.x) * (scale+degree*0.1) + center.x; tPos.y = (uv.y - center.y) * (scale+degree*0.1) + center.y; return tPos; } // 通过放大镜距离获得纹理 vec2 getDisTextPos(vec2 uv, vec2 center, float scale, float radius){ float dis = pow(abs(uv.x - center.x)*abs(uv.x - center.x) + (abs(uv.y - center.y)/nodeTextureProportion)*(abs(uv.y - center.y)/nodeTextureProportion),0.5); if(dis <= radius){ float deg = smoothstep(radius - 0.03, radius, dis); return getTextPos(uv, center, scale, deg); } return uv; } vec4 frag () { vec4 o = vec4(1, 1, 1, 1); //vec2 tempCenter = vec2(0.5,abs(sin(cc_time.x))); #if USE_TEXTURE vec2 uv = getDisTextPos(uv0, magnifierCenterPoint, magnifierScale, magnifierRadius); o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv); #if IS_GRAY float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b; o.r = o.g = o.b = gray; #endif #endif o *= color; ALPHA_TEST(o); return o; } }% \"]},\"16\":{\"c\":[\"ccc_shader学习\"]},\"17\":{\"h\":\"正反贴图不同的shader-3d\",\"t\":[\"今天研究一个卡片效果，让一个物体正反有两种不同的贴图\",\" CCEffect %{ techniques: - name: opaque passes: - vert: general-vs:vert #指定顶点着色器 frag: unlit-fs:frag #指定像素着色器 properties: &props mainTexture: { value : white } otherTexture: { value : white } skyCube : { value: white } migrations: &migrations properties: }% CCProgram unlit-fs %{ //定义默认精度 precision highp float; #include <output> in vec2 v_uv; in vec3 v_position; in vec3 v_normal; uniform sampler2D mainTexture; uniform sampler2D otherTexture; uniform samplerCube skyCube; vec4 frag () { //声明一个颜色 vec4 color =vec4(1,1,1,1); vec3 viewDir=normalize(cc_cameraPos.xyz-v_position); bool isBack=dot(v_normal,viewDir)<=0.0; if(isBack){ //判断是反面，则贴图的X轴反向一下 color*=texture(otherTexture,vec2((1.-v_uv.x),v_uv.y)); }else{ color*=texture(mainTexture,v_uv); } //输出颜色 return CCFragOutput(color); } }% \"]},\"18\":{\"c\":[\"ccc_shader学习\"]},\"19\":{\"h\":\"资料汇总\"},\"20\":{\"h\":\"分享一些学习的网站\"},\"21\":{\"h\":\"openGL文档\",\"t\":[\"https://learnopengl-cn.github.io/\"]},\"22\":{\"h\":\"WebGL 理论基础\",\"t\":[\"https://webglfundamentals.org/webgl/lessons/zh_cn/\"]},\"23\":{\"h\":\"shader编写案例（可参考后自己修改）\",\"t\":[\"https://www.shadertoy.com/browse\"]},\"24\":{\"h\":\"openGl4接口和方法\",\"t\":[\"https://www.khronos.org/registry/OpenGL-Refpages/gl4/index.php\"]},\"25\":{\"h\":\"对3D有帮助的书籍汇总：\",\"t\":[\"《3D数学基础:图形与游戏开发》\",\"《window游戏编程大师技巧》\",\"《3D游戏编程大师技巧》\",\"《游戏引擎架构》\",\"《OpenGL 编程指南》\",\"《Real-Time Rendering 4th》\",\"《Physically Based Rendering 3rd》\",\"《WebGL编程指南》\",\"（其他学习资料待补充）\",\"本次学习效果均在CocosCreator3.0以上完成\",\"开始前，我们首先来认识一下cocos的effect 这里推荐直接看cocos的文档，链接如下（着急入门的先看完以下4条）：\",\"1.yaml语法https://docs.cocos.com/creator/manual/zh/material-system/yaml-101.html\",\"2.effect结构https://docs.cocos.com/creator/manual/zh/shader/effect-syntax.html\",\"3.Pass 可选配置参数https://docs.cocos.com/creator/manual/zh/shader/pass-parameter-list.html\",\"4.常用 shader 内置 Uniformhttps://docs.cocos.com/creator/manual/zh/shader/uniform.html\"]},\"26\":{\"c\":[\"ccc_shader学习\"]},\"27\":{\"h\":\"加载pkm\",\"t\":[\"cocos creator 2.x 加载pkm\",\" let self = this; assetManager.loadRes( \\\"test/round_cocos_frame69c&48/round_cocos_frame69c_1\\\",SpriteFrame,function (err, assests) { if (err){ console.log(err) } assests._nativeAsset.format = 77; let imgAsset = new ImageAsset(assests._nativeAsset) let texture = new Texture2D(); texture.image = imgAsset; let spriteFrame = new SpriteFrame(); spriteFrame.packable = false spriteFrame.texture = texture; self.testNode.spriteFrame = spriteFrame; }) } \"]},\"28\":{\"c\":[\"cocosCreator3.x\"]},\"29\":{\"h\":\"分帧加载\",\"t\":[\"我们在生成item的时候，很容易造成页面动画卡顿，这个时候，我们需要考虑去分帧加载，可以参考以下代码\",\"//初始化item initItem(index){ } /** * 实现分帧加载 */ async framingLoad(length: number) { await this.executePreFrame(this._getItemGenerator(length), 1); } private *_getItemGenerator(length: number) { for (let i = 0; i < length; i++) { yield this.initItem(i); } } /** * 分帧执行 Generator 逻辑 * * @param generator 生成器 * @param duration 持续时间（ms） * 每次执行 Generator 的操作时，最长可持续执行时长。 * 假设值为8ms，那么表示1帧（总共16ms）下，分出8ms时间给此逻辑执行 */ private executePreFrame(generator: Generator, duration: number) { return new Promise((resolve, reject) => { let gen = generator; // 创建执行函数 let execute = () => { // 执行之前，先记录开始时间戳 let startTime = new Date().getTime(); // 然后一直从 Generator 中获取已经拆分好的代码段出来执行 for (let iter = gen.next(); ; iter = gen.next()) { // 判断是否已经执行完所有 Generator 的小代码段 // 如果是的话，那么就表示任务完成 if (iter == null || iter.done) { resolve(null); return; } // 每执行完一段小代码段，都检查一下是否 // 已经超过我们分配给本帧，这些小代码端的最大可执行时间 if (new Date().getTime() - startTime > duration) { // 如果超过了，那么本帧就不在执行，开定时器，让下一帧再执行 this.scheduleOnce(() => { execute(); }); return; } } }; // 运行执行函数 execute(); }); } \"]},\"30\":{\"c\":[\"cocosCreator2.x\"]},\"31\":{\"h\":\"加载pkm\",\"t\":[\"cocos creator 2.x 加载pkm\",\"let url2 = ‘C:/Users/xxx.pkm’ cc.assetManager.loadAny({ url: url2 }, function (err, assests) { if (err) console.log(err) let texture = new cc.RenderTexture(); let dataView = assests._data; texture.initWithData(dataView, cc.Texture2D.PixelFormat.RGBA_ETC2, assests.width, assests.height); let spriteFrame = new cc.SpriteFrame(texture); }) \"]},\"32\":{\"c\":[\"cocosCreator2.x\"]},\"33\":{\"h\":\"PSD文件处理\",\"t\":[\"尝试使用 psd.js对psd文件进行解析，以下是输出所有png\"]},\"34\":{\"h\":\"环境\",\"t\":[\"npm install psd.js \"]},\"35\":{\"h\":\"代码\",\"t\":[\"const PSD = require('psd'); const path = require('path'); const output = './output'; function psdToPng(psdPath) { // 读取 PSD 文件 PSD.open(psdPath).then(psd => { // 获取所有图层 const layers = psd.tree().descendants(); // 逐个导出每个图层 layers.forEach(layer => { // 导出图层为 PNG 文件 const layerName = layer.name; let type = layer.type; if (type == \\\"group\\\") { return; } const outputFileName = `${layerName}.png`; const outputPath = path.join(output, outputFileName); // 输出文件夹路径 layer.saveAsPng(outputPath); console.log(`Exported layer: ${layerName} to ${outputPath}`); }); console.log('All layers exported successfully.'); }).catch(err => { console.error(err); }); } psdToPng('./test.psd'); \"]},\"36\":{\"c\":[\"其他\"]},\"37\":{\"h\":\"wasm初学习\",\"t\":[\"首先安装 Emscripten\",\"git clone https://github.com/emscripten-core/emsdk.git # 进入目录 cd emsdk # 下载最新 SDK 工具 ./emsdk install latest # 版本设置为最新 ./emsdk activate latest # 将相关命令行工具加入到 PATH 环境变量中（临时） source ./emsdk_env.sh \",\"然后我们把下列的update_triangle.cpp文件，编译成wasm文件，这里暴露updateTriangle和updateColor两个方法给js来改点顶点和颜色\",\"#include <functional> #include <SDL.h> #include <stdio.h> #define GL_GLEXT_PROTOTYPES 1 #include <SDL_opengles2.h> // wasm 需要暴露方法给 js，引入这个头文件 #include <emscripten.h> const char *vertexShaderSource = \\\"attribute vec4 a_position;\\\\n\\\" \\\"void main() {\\\\n\\\" \\\" gl_Position = a_position;\\\\n\\\" \\\"}\\\\n\\\"; const char *fragmentShaderSource = \\\"precision mediump float;\\\\n\\\" \\\"uniform vec4 color;\\\\n\\\" // 添加一个 uniform 变量来接收颜色值 \\\"void main() {\\\\n\\\" \\\" gl_FragColor = color;\\\\n\\\" // 使用传入的颜色值 \\\"}\\\\n\\\"; GLfloat vertices[] = {0.0f, 0.5f, -0.5f, -0.5f, 0.5f, -0.5f}; GLfloat color[4] = {1.0f, 1.0f, 0.0f, 1.0f}; void render() { printf(\\\"渲染三角形~~~\\\\n\\\"); SDL_Window *window; SDL_CreateWindowAndRenderer(400, 400, 0, &window, nullptr); GLuint vao; glGenVertexArraysOES(1, &vao); glBindVertexArrayOES(vao); GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER); glShaderSource(vertexShader, 1, &vertexShaderSource, nullptr); glCompileShader(vertexShader); GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER); glShaderSource(fragmentShader, 1, &fragmentShaderSource, nullptr); glCompileShader(fragmentShader); GLuint program = glCreateProgram(); glAttachShader(program, vertexShader); glAttachShader(program, fragmentShader); glLinkProgram(program); glUseProgram(program); GLuint vbo; glGenBuffers(1, &vbo); glBindBuffer(GL_ARRAY_BUFFER, vbo); glBufferData(GL_ARRAY_BUFFER, 24, vertices, GL_STATIC_DRAW); GLint position = glGetAttribLocation(program, \\\"a_position\\\"); glVertexAttribPointer(position, 2, GL_FLOAT, GL_FALSE, 0, 0); glEnableVertexAttribArray(position); GLuint colorLocation = glGetUniformLocation(program, \\\"color\\\"); glUniform4fv(colorLocation, 1, color); glClearColor(0, 0, 1, 0); glClear(GL_COLOR_BUFFER_BIT); glDrawArrays(GL_TRIANGLES, 0, 3); glDeleteBuffers(1, &vbo); } int main() { render(); } // 定义一个 updateColor 方法给 js 用。全局会出现一个 _updateColor 方法。 // EMSCRIPTEN_KEEPALIVE 宏防止方法编译时被优化掉 extern \\\"C\\\" void EMSCRIPTEN_KEEPALIVE updateTriangle(float n1, float n2) { printf(\\\"n1: %f, n2: %f\\\\n\\\", n1, n2); vertices[0] = n1; vertices[1] = n2; render(); } extern \\\"C\\\" void EMSCRIPTEN_KEEPALIVE updateColor(float n1, float n2, float n3, float n4) { color[0] = n1; color[1] = n2; color[2] = n3; color[3] = n4; render(); } \",\"运行编译代码\",\"emcc update_triangle.cpp -std=c++11 -s WASM=1 -s USE_SDL=2 -O3 -o updateTriangle.js \",\"生成了updateTriangle.js和updateTriangle.wasm两个文件后，我们写一个index.html来进行使用\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>更新三角形</title> </head> <body> <canvas width=\\\"400\\\" height=\\\"400\\\"></canvas> <script> const canvas = document.querySelector('canvas'); var Module = { // 指定要渲染的画布元素 canvas: canvas, }; </script> <script src=\\\"updateTriangle.js\\\"></script> </body> </html> \",\"在web页面，我们可以通过使用_updateTriangle和_updateColor方法来更新三角形和颜色。\"]},\"38\":{\"c\":[\"其他\"]},\"39\":{\"h\":\"Ccc Shader学习\"},\"40\":{\"h\":\"Cocos Creator3.x\"},\"41\":{\"h\":\"Cocos Creator2.x\"},\"42\":{\"h\":\"其他\"}},\"dirtCount\":0,\"index\":[[\"在web页面\",{\"1\":{\"37\":1}}],[\"在原始图像颜色上叠加扩散颜色\",{\"1\":{\"13\":1}}],[\"queryselector\",{\"1\":{\"37\":1}}],[\"生成了updatetriangle\",{\"1\":{\"37\":1}}],[\"生成器\",{\"1\":{\"29\":1}}],[\"运行编译代码\",{\"1\":{\"37\":1}}],[\"运行执行函数\",{\"1\":{\"29\":1}}],[\"宏防止方法编译时被优化掉\",{\"1\":{\"37\":1}}],[\"keepalive\",{\"1\":{\"37\":3}}],[\"khronos\",{\"1\":{\"24\":1}}],[\"全局会出现一个\",{\"1\":{\"37\":1}}],[\"用\",{\"1\":{\"37\":1}}],[\"用cocos自带的顶点着色器片段\",{\"1\":{\"11\":1}}],[\"方法\",{\"1\":{\"37\":1}}],[\"方法给\",{\"1\":{\"37\":1}}],[\"方便后续查询\",{\"1\":{\"11\":1}}],[\"方便计算触摸点在图片上的比例\",{\"1\":{\"5\":1}}],[\"定义一个\",{\"1\":{\"37\":1}}],[\"定义默认精度\",{\"1\":{\"11\":3,\"17\":1}}],[\"渲染三角形~~~\",{\"1\":{\"37\":1}}],[\"变量来接收颜色值\",{\"1\":{\"37\":1}}],[\"变色或者改透明度等等\",{\"1\":{\"7\":1}}],[\"添加一个\",{\"1\":{\"37\":1}}],[\"引入这个头文件\",{\"1\":{\"37\":1}}],[\"需要暴露方法给\",{\"1\":{\"37\":1}}],[\"临时\",{\"1\":{\"37\":1}}],[\"将相关命令行工具加入到\",{\"1\":{\"37\":1}}],[\"版本设置为最新\",{\"1\":{\"37\":1}}],[\"工具\",{\"1\":{\"37\":1}}],[\"进入目录\",{\"1\":{\"37\":1}}],[\"$\",{\"1\":{\"35\":2}}],[\"`\",{\"1\":{\"35\":1}}],[\"`exported\",{\"1\":{\"35\":1}}],[\"`$\",{\"1\":{\"35\":1}}],[\"join\",{\"1\":{\"35\":1}}],[\"js和updatetriangle\",{\"1\":{\"37\":1}}],[\"js\",{\"1\":{\"34\":1,\"37\":4}}],[\"js对psd文件进行解析\",{\"1\":{\"33\":1}}],[\"导出图层为\",{\"1\":{\"35\":1}}],[\"逐个导出每个图层\",{\"1\":{\"35\":1}}],[\"文件\",{\"1\":{\"35\":2}}],[\"读取\",{\"1\":{\"35\":1}}],[\"代码\",{\"0\":{\"35\":1}}],[\"代码如下\",{\"1\":{\"5\":1}}],[\"环境变量中\",{\"1\":{\"37\":1}}],[\"环境\",{\"0\":{\"34\":1}}],[\"尝试使用\",{\"1\":{\"33\":1}}],[\"尝试用代码控制shader\",{\"1\":{\"5\":1}}],[\"开定时器\",{\"1\":{\"29\":1}}],[\"开始前\",{\"1\":{\"25\":1}}],[\"已经超过我们分配给本帧\",{\"1\":{\"29\":1}}],[\"都检查一下是否\",{\"1\":{\"29\":1}}],[\"每执行完一段小代码段\",{\"1\":{\"29\":1}}],[\"每次执行\",{\"1\":{\"29\":1}}],[\"||\",{\"1\":{\"29\":1}}],[\"|uv0\",{\"1\":{\"13\":1}}],[\"如果超过了\",{\"1\":{\"29\":1}}],[\"如果是的话\",{\"1\":{\"29\":1}}],[\"如果x大于high\",{\"1\":{\"5\":1}}],[\"如果x小于low\",{\"1\":{\"5\":1}}],[\"判断是否已经执行完所有\",{\"1\":{\"29\":1}}],[\"判断是反面\",{\"1\":{\"17\":1}}],[\"中获取已经拆分好的代码段出来执行\",{\"1\":{\"29\":1}}],[\"先记录开始时间戳\",{\"1\":{\"29\":1}}],[\"执行之前\",{\"1\":{\"29\":1}}],[\"创建执行函数\",{\"1\":{\"29\":1}}],[\"总共16ms\",{\"1\":{\"29\":1}}],[\"假设值为8ms\",{\"1\":{\"29\":1}}],[\"假设此线和光束中心线相交的点为d点\",{\"1\":{\"13\":1}}],[\"最长可持续执行时长\",{\"1\":{\"29\":1}}],[\"持续时间\",{\"1\":{\"29\":1}}],[\"逻辑\",{\"1\":{\"29\":1}}],[\"实现分帧加载\",{\"1\":{\"29\":1}}],[\"初始化item\",{\"1\":{\"29\":1}}],[\"很容易造成页面动画卡顿\",{\"1\":{\"29\":1}}],[\"分出8ms时间给此逻辑执行\",{\"1\":{\"29\":1}}],[\"分帧执行\",{\"1\":{\"29\":1}}],[\"分帧加载\",{\"0\":{\"29\":1}}],[\"分享一些学习的网站\",{\"0\":{\"20\":1}}],[\"加载pkm\",{\"0\":{\"27\":1,\"31\":1},\"1\":{\"27\":1,\"31\":1}}],[\"加入从中心往外渐变的效果\",{\"1\":{\"13\":1}}],[\"着急入门的先看完以下4条\",{\"1\":{\"25\":1}}],[\"着色器代码如下\",{\"1\":{\"5\":1}}],[\"链接如下\",{\"1\":{\"25\":1}}],[\"本次学习效果均在cocoscreator3\",{\"1\":{\"25\":1}}],[\"本地空间\",{\"1\":{\"11\":1}}],[\"本地坐标系\",{\"1\":{\"11\":1}}],[\"编译成wasm文件\",{\"1\":{\"37\":1}}],[\"编程指南\",{\"1\":{\"25\":1}}],[\"编写第一个shader文件\",{\"1\":{\"5\":1}}],[\"游戏引擎架构\",{\"1\":{\"25\":1}}],[\"游戏相关\",{\"0\":{\"0\":1}}],[\"图形与游戏开发\",{\"1\":{\"25\":1}}],[\"图片宽高比\",{\"1\":{\"15\":1}}],[\"图片溶解\",{\"0\":{\"7\":1},\"1\":{\"7\":1}}],[\"可以参考以下代码\",{\"1\":{\"29\":1}}],[\"可参考后自己修改\",{\"0\":{\"23\":1}}],[\"可选配置参数https\",{\"1\":{\"25\":1}}],[\"可选配置参数\",{\"1\":{\"5\":1}}],[\"理论基础\",{\"0\":{\"22\":1}}],[\"资料汇总\",{\"0\":{\"19\":1}}],[\"今天研究一个卡片效果\",{\"1\":{\"17\":1}}],[\"正反贴图不同的shader\",{\"0\":{\"17\":1}}],[\"通过放大镜距离获得纹理\",{\"1\":{\"15\":1}}],[\"通过学习\",{\"1\":{\"5\":1}}],[\"获得应该渲染的纹理位置\",{\"1\":{\"15\":1}}],[\"获取所有图层\",{\"1\":{\"35\":1}}],[\"获取世界矩阵\",{\"1\":{\"11\":1}}],[\"获取顶点位置位置信息\",{\"1\":{\"11\":1}}],[\"展示缩放距离中心点的位置\",{\"1\":{\"15\":1}}],[\"缩放比例\",{\"1\":{\"15\":1}}],[\"缩放中心点\",{\"1\":{\"15\":1}}],[\"77\",{\"1\":{\"27\":1}}],[\"75\",{\"1\":{\"15\":1}}],[\"7152\",{\"1\":{\"5\":2,\"15\":1}}],[\"节点的宽高比\",{\"1\":{\"15\":1}}],[\"节点宽高比比例\",{\"1\":{\"15\":1}}],[\"6\",{\"1\":{\"15\":2}}],[\"放大镜放大倍数\",{\"1\":{\"15\":1}}],[\"放大镜倍数\",{\"1\":{\"15\":1}}],[\"放大镜半径\",{\"1\":{\"15\":2}}],[\"放大镜中心点坐标\",{\"1\":{\"15\":2}}],[\"放大镜效果\",{\"0\":{\"15\":1}}],[\"混合颜色\",{\"1\":{\"13\":1}}],[\"不同\",{\"1\":{\"13\":1}}],[\"不要勾选自动合图\",{\"1\":{\"5\":1}}],[\"迷雾效果\",{\"1\":{\"13\":1}}],[\"裁剪掉光束范围外的uv\",{\"1\":{\"13\":1}}],[\"裁剪掉透明区域上的点光\",{\"1\":{\"13\":1}}],[\"以下是输出所有png\",{\"1\":{\"33\":1}}],[\"以当前点画一条平行于x轴的线\",{\"1\":{\"13\":1}}],[\"以上内容是内置sprite的effect代码\",{\"1\":{\"5\":1}}],[\"类似\",{\"1\":{\"13\":1}}],[\"下载最新\",{\"1\":{\"37\":1}}],[\"下\",{\"1\":{\"29\":1}}],[\"下文的\",{\"1\":{\"13\":1}}],[\"下面的代码是左乘\",{\"1\":{\"11\":1}}],[\"是将转换为opengl坐标系\",{\"1\":{\"13\":1}}],[\"是不是可以干一点别的事情\",{\"1\":{\"5\":1}}],[\"角度0与非0不同处理\",{\"1\":{\"13\":1}}],[\"的小代码段\",{\"1\":{\"29\":1}}],[\"的操作时\",{\"1\":{\"29\":1}}],[\"的距离就是\",{\"1\":{\"13\":1}}],[\"的距离\",{\"1\":{\"13\":1}}],[\"的值再大一点\",{\"1\":{\"5\":1}}],[\"到当前\",{\"1\":{\"13\":1}}],[\"到\",{\"1\":{\"13\":1}}],[\"没有宽度就返回原始颜色\",{\"1\":{\"13\":1}}],[\"边界值处理\",{\"1\":{\"13\":1}}],[\"光束\",{\"1\":{\"13\":1}}],[\"光束倾斜角度\",{\"1\":{\"13\":1}}],[\"光圈起点\",{\"1\":{\"9\":1}}],[\"光圈半径\",{\"1\":{\"9\":1}}],[\"光圈模糊程度\",{\"1\":{\"9\":1}}],[\"扫光效果\",{\"0\":{\"13\":1},\"1\":{\"13\":1}}],[\"同时他暴露的参数后续在像素着色器里也是可以使用的\",{\"1\":{\"11\":1}}],[\"修改后的代码\",{\"1\":{\"11\":1}}],[\"一般来说顶点着色器修改小\",{\"1\":{\"11\":1}}],[\"一个圆形头像遮罩就完成了\",{\"1\":{\"5\":1}}],[\"发现顶点着色器cocos已经帮我们写好一个比较详细的了\",{\"1\":{\"11\":1}}],[\"发现效果还可以\",{\"1\":{\"5\":1}}],[\"输出文件夹路径\",{\"1\":{\"35\":1}}],[\"输出颜色\",{\"1\":{\"11\":2,\"17\":1}}],[\"输出位置\",{\"1\":{\"11\":1}}],[\"声明一个颜色\",{\"1\":{\"11\":2,\"17\":1}}],[\"刚好可以存储一个行向量\",{\"1\":{\"11\":1}}],[\"虽然在opengl或者webgl中默认是列向量和列矩阵\",{\"1\":{\"11\":1}}],[\"注\",{\"1\":{\"11\":1}}],[\"且矩阵为行矩阵\",{\"1\":{\"11\":1}}],[\"原因在于position为行向量\",{\"1\":{\"11\":1}}],[\"投影\",{\"1\":{\"11\":1}}],[\"投影矩阵\",{\"1\":{\"11\":1}}],[\"摄像机空间\",{\"1\":{\"11\":1}}],[\"摄像机矩阵\",{\"1\":{\"11\":1}}],[\"世界空间\",{\"1\":{\"11\":1}}],[\"世界矩阵\",{\"1\":{\"11\":1}}],[\"顶点需要经过如下变换\",{\"1\":{\"11\":1}}],[\"根据矩阵变换规则\",{\"1\":{\"11\":1}}],[\"指定要渲染的画布元素\",{\"1\":{\"37\":1}}],[\"指定像素着色器\",{\"1\":{\"11\":2,\"17\":1}}],[\"指定顶点着色器\",{\"1\":{\"11\":2,\"17\":1}}],[\"作为编写模板\",{\"1\":{\"11\":1}}],[\"简单总结一些shader内容\",{\"1\":{\"11\":1}}],[\"简单介绍一下clamp\",{\"1\":{\"5\":1}}],[\"对3d有帮助的书籍汇总\",{\"0\":{\"25\":1}}],[\"对应的实际扩散颜色值\",{\"1\":{\"13\":1}}],[\"对effect代码的详细解释和精简\",{\"0\":{\"11\":1}}],[\"对溶解的边缘做处理\",{\"1\":{\"7\":1}}],[\"达到边缘羽化效果\",{\"1\":{\"9\":1}}],[\"优化边缘锯齿\",{\"1\":{\"9\":1}}],[\"使用传入的颜色值\",{\"1\":{\"37\":1}}],[\"使用内部插值函数\",{\"1\":{\"9\":1}}],[\"使用勾股定理计算圆外的像素\",{\"1\":{\"9\":1}}],[\"使用自定义shader的图片\",{\"1\":{\"5\":1}}],[\"圆心在纹理中心\",{\"1\":{\"9\":1}}],[\"宽高比\",{\"1\":{\"9\":1}}],[\"wasm两个文件后\",{\"1\":{\"37\":1}}],[\"wasm=1\",{\"1\":{\"37\":1}}],[\"wasm\",{\"1\":{\"37\":1}}],[\"wasm初学习\",{\"0\":{\"37\":1}}],[\"window\",{\"1\":{\"37\":3}}],[\"window游戏编程大师技巧\",{\"1\":{\"25\":1}}],[\"width=\",{\"1\":{\"37\":1}}],[\"width\",{\"1\":{\"5\":5,\"31\":1}}],[\"www\",{\"1\":{\"23\":1,\"24\":1}}],[\"webgl编程指南\",{\"1\":{\"25\":1}}],[\"webglfundamentals\",{\"1\":{\"22\":1}}],[\"webgl\",{\"0\":{\"22\":1},\"1\":{\"22\":1}}],[\"w\",{\"1\":{\"11\":1}}],[\"white\",{\"1\":{\"11\":1,\"17\":3}}],[\"wh\",{\"1\":{\"9\":4}}],[\"适合宽高比不同的图片\",{\"1\":{\"9\":1}}],[\"官方提供的头像框遮罩shader\",{\"1\":{\"9\":1}}],[\"头像遮罩\",{\"0\":{\"9\":1}}],[\"95\",{\"1\":{\"7\":1}}],[\"92\",{\"1\":{\"7\":1}}],[\"8\",{\"1\":{\"7\":1,\"37\":1}}],[\"当前点到光束中心线的的垂直距离就好算了\",{\"1\":{\"13\":1}}],[\"当颜色小于溶解的程度\",{\"1\":{\"7\":1}}],[\"当距离大于\",{\"1\":{\"5\":1}}],[\"溶解比例\",{\"1\":{\"7\":2}}],[\"自定义参数\",{\"1\":{\"7\":1,\"9\":1}}],[\"><\",{\"1\":{\"37\":2}}],[\">\",{\"1\":{\"5\":2,\"11\":3,\"29\":1,\"37\":2}}],[\"yield\",{\"1\":{\"29\":1}}],[\"y\",{\"1\":{\"5\":8,\"9\":5,\"13\":9,\"15\":8,\"17\":1}}],[\"yaml\",{\"1\":{\"5\":1,\"25\":1}}],[\"yaml语法https\",{\"1\":{\"25\":1}}],[\"yaml语法\",{\"1\":{\"5\":1}}],[\"yaji\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1}}],[\"脚本代码如下\",{\"1\":{\"5\":1}}],[\"有这两个参数\",{\"1\":{\"5\":1}}],[\"接收这两个值\",{\"1\":{\"5\":1}}],[\"接下来\",{\"1\":{\"5\":2}}],[\"并且可以被修改\",{\"1\":{\"5\":1}}],[\"并且最后融入sprite组件自带的color颜色\",{\"1\":{\"5\":1}}],[\"并在sprite\",{\"1\":{\"5\":1}}],[\"探索一下好玩的东西\",{\"1\":{\"5\":1}}],[\"尽可能不在0\",{\"1\":{\"5\":1}}],[\"让下一帧再执行\",{\"1\":{\"29\":1}}],[\"让一个物体正反有两种不同的贴图\",{\"1\":{\"17\":1}}],[\"让让圆心距离超过半径的像素丢弃或者透明度设置为0\",{\"1\":{\"9\":1}}],[\"让\",{\"1\":{\"5\":1}}],[\"让原本的图片不显示纹理\",{\"1\":{\"5\":1}}],[\"所以向量和矩阵在显卡里面是按行向量存储的\",{\"1\":{\"11\":1}}],[\"所以\",{\"1\":{\"5\":1}}],[\"所以我们可以考虑\",{\"1\":{\"5\":1}}],[\"所以我们可以把着色器代码先修改成cocos默认的sprite着色器代码\",{\"1\":{\"5\":1}}],[\"会比较低\",{\"1\":{\"5\":1}}],[\"会导致透明度保持原数值\",{\"1\":{\"5\":1}}],[\"数值在0\",{\"1\":{\"5\":1}}],[\"那么本帧就不在执行\",{\"1\":{\"29\":1}}],[\"那么就表示任务完成\",{\"1\":{\"29\":1}}],[\"那么表示1帧\",{\"1\":{\"29\":1}}],[\"那么\",{\"1\":{\"13\":1}}],[\"那么这一圈是不可见的\",{\"1\":{\"5\":1}}],[\"那么我们就写个脚本来修改这两个值\",{\"1\":{\"5\":1}}],[\"那么我们定义一个变量来让这个点可以被修改把\",{\"1\":{\"5\":1}}],[\"那么我们可以把getnum函数改成如下\",{\"1\":{\"5\":1}}],[\"那么我们接下来尝试做一个圆形头像的遮罩\",{\"1\":{\"5\":1}}],[\"取最小值则是0\",{\"1\":{\"5\":1}}],[\"此时相减为负数\",{\"1\":{\"5\":1}}],[\"计算出扩散范围内\",{\"1\":{\"13\":1}}],[\"计算光束中心线下方与x轴交点的x坐标\",{\"1\":{\"13\":1}}],[\"计算当前\",{\"1\":{\"13\":1}}],[\"计算uv到中心点的距离\",{\"1\":{\"5\":1}}],[\"计算两点之间的距离\",{\"1\":{\"5\":1}}],[\"于是我们大致可以先写出一个函数\",{\"1\":{\"5\":1}}],[\"既然可以修改透明度\",{\"1\":{\"5\":1}}],[\"n4\",{\"1\":{\"37\":2}}],[\"n3\",{\"1\":{\"37\":2}}],[\"n2\",{\"1\":{\"37\":6}}],[\"n1\",{\"1\":{\"37\":6}}],[\"n\",{\"1\":{\"37\":11}}],[\"npm\",{\"1\":{\"34\":1}}],[\"nullptr\",{\"1\":{\"37\":3}}],[\"null\",{\"1\":{\"29\":2}}],[\"number\",{\"1\":{\"29\":3}}],[\"num\",{\"1\":{\"5\":2}}],[\"num=getnum\",{\"1\":{\"5\":2}}],[\"next\",{\"1\":{\"29\":2}}],[\"new\",{\"1\":{\"27\":3,\"29\":3,\"31\":2}}],[\"nativeasset\",{\"1\":{\"27\":2}}],[\"name\",{\"1\":{\"11\":4,\"17\":1,\"35\":1}}],[\"note\",{\"1\":{\"11\":1}}],[\"normalize\",{\"1\":{\"11\":2}}],[\"normal\",{\"1\":{\"11\":4,\"17\":2}}],[\"nodetextureproportion\",{\"1\":{\"15\":4}}],[\"node\",{\"1\":{\"5\":5}}],[\"none\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"看看图片有什么变化\",{\"1\":{\"5\":1}}],[\"然后我们把下列的update\",{\"1\":{\"37\":1}}],[\"然后我们编写一个touchmove函数并把脚本绑定在节点下\",{\"1\":{\"5\":1}}],[\"然后一直从\",{\"1\":{\"29\":1}}],[\"然后赋值给材质并把材质赋给一个2dsprite\",{\"1\":{\"5\":1}}],[\"然乎我们把这个num定为o的透明度\",{\"1\":{\"5\":1}}],[\"主要是通过传入的uv来进行一个区间限定最后返回一个num\",{\"1\":{\"5\":1}}],[\"则贴图的x轴反向一下\",{\"1\":{\"17\":1}}],[\"则直接抛弃\",{\"1\":{\"7\":1}}],[\"则返回high\",{\"1\":{\"5\":1}}],[\"则返回low\",{\"1\":{\"5\":1}}],[\"则等于x\",{\"1\":{\"5\":1}}],[\"范围内\",{\"1\":{\"5\":1}}],[\"若x在\",{\"1\":{\"5\":1}}],[\"还是修改o然后和纹理进行一个融合\",{\"1\":{\"5\":1}}],[\"只是改变图片融合的颜色\",{\"1\":{\"5\":1}}],[\"只显示一个绿色\",{\"1\":{\"5\":1}}],[\"但是由于显卡一个寄存器是4分量\",{\"1\":{\"11\":1}}],[\"但是这样减出来\",{\"1\":{\"5\":1}}],[\"但是我们知道\",{\"1\":{\"5\":1}}],[\"但其实\",{\"1\":{\"5\":1}}],[\"其实最后o\",{\"1\":{\"5\":1}}],[\"其实我们最重要的有时候还是需要显示图片的纹理\",{\"1\":{\"5\":1}}],[\"其他学习资料待补充\",{\"1\":{\"25\":1}}],[\"其他\",{\"0\":{\"4\":1,\"42\":1},\"2\":{\"36\":1,\"38\":1}}],[\"首先安装\",{\"1\":{\"37\":1}}],[\"首先\",{\"1\":{\"5\":1}}],[\"首先我们将frag函数进行一个简单的修改\",{\"1\":{\"5\":1}}],[\"首先在编辑器下创建一个简单的着色器和材质\",{\"1\":{\"5\":1}}],[\"否则打包后可能没有对应的shader效果\",{\"1\":{\"5\":1}}],[\"这些小代码端的最大可执行时间\",{\"1\":{\"29\":1}}],[\"这样\",{\"1\":{\"5\":2}}],[\"这样我们便得到了变成绿色的纹理图片\",{\"1\":{\"5\":1}}],[\"这个时候\",{\"1\":{\"29\":1}}],[\"这个函数是区间限定函数\",{\"1\":{\"5\":1}}],[\"这个操作很简单\",{\"1\":{\"5\":1}}],[\"这时候我们就可以在编辑器看到材质里\",{\"1\":{\"5\":1}}],[\"这时候我们发现我们测试的图片从左往右透明度逐渐发生了变化\",{\"1\":{\"5\":1}}],[\"这时候\",{\"1\":{\"5\":1}}],[\"这里暴露updatetriangle和updatecolor两个方法给js来改点顶点和颜色\",{\"1\":{\"37\":1}}],[\"这里推荐直接看cocos的文档\",{\"1\":{\"25\":1}}],[\"这里我们也贴一下内置的顶点着色器代码片段\",{\"1\":{\"11\":1}}],[\"这里我们可以把代码再次精简\",{\"1\":{\"11\":1}}],[\"这里我们不过多深究\",{\"1\":{\"5\":1}}],[\"这里\",{\"1\":{\"5\":1}}],[\"这里引用了另一个函数distance\",{\"1\":{\"5\":1}}],[\"这里需要注意的是\",{\"1\":{\"5\":1}}],[\"这两个方法\",{\"1\":{\"5\":1}}],[\"这一段里\",{\"1\":{\"5\":1}}],[\"这一段代码中\",{\"1\":{\"5\":1}}],[\"我们写一个index\",{\"1\":{\"37\":1}}],[\"我们需要考虑去分帧加载\",{\"1\":{\"29\":1}}],[\"我们需要把精灵的锚点改到左下角\",{\"1\":{\"5\":1}}],[\"我们首先来认识一下cocos的effect\",{\"1\":{\"25\":1}}],[\"我们从模板出发往回推\",{\"1\":{\"11\":1}}],[\"我们尝试编写把他修改成最简单的一个shader文件\",{\"1\":{\"11\":1}}],[\"我们尝试更改一下ditance里的距离点的位置\",{\"1\":{\"5\":1}}],[\"我们新建了一个3d的effect来看下3d相关的shader\",{\"1\":{\"11\":1}}],[\"我们以3\",{\"1\":{\"11\":1}}],[\"我们在生成item的时候\",{\"1\":{\"29\":1}}],[\"我们在\",{\"1\":{\"5\":1}}],[\"我们把\",{\"1\":{\"5\":1}}],[\"我们修改一下\",{\"1\":{\"5\":1}}],[\"我们必须要让正值都大于1才能取到1\",{\"1\":{\"5\":1}}],[\"我们必须要让距离中心点为一半的都是可见的\",{\"1\":{\"5\":1}}],[\"我们会用到opengl函数clamp\",{\"1\":{\"5\":1}}],[\"我们只是将初始的绿色在有纹理的时候和纹理进行了一个融合\",{\"1\":{\"5\":1}}],[\"我们可以通过使用\",{\"1\":{\"37\":1}}],[\"我们可以将定义的o和纹理进行一个简单的融合\",{\"1\":{\"5\":1}}],[\"我们可以看到是导入的内置的着色器片段的方法\",{\"1\":{\"5\":1}}],[\"我们先写一个函数\",{\"1\":{\"5\":1}}],[\"我们先尝试将frag函数进行一个简单的修改并用于我们测试的图片上\",{\"1\":{\"5\":1}}],[\"我们先从2d开始\",{\"1\":{\"5\":1}}],[\"我们发现他主要用到了一个ccsamplewithalphaseparated和alpha\",{\"1\":{\"5\":1}}],[\"我们知道可以去修改sprite\",{\"1\":{\"5\":1}}],[\"内置\",{\"1\":{\"5\":1,\"25\":1}}],[\"常用\",{\"1\":{\"5\":1,\"25\":1}}],[\"400\",{\"1\":{\"37\":4}}],[\"48\",{\"1\":{\"27\":1}}],[\"4th\",{\"1\":{\"25\":1}}],[\"45\",{\"1\":{\"13\":1}}],[\"4\",{\"1\":{\"5\":1,\"11\":1,\"25\":1,\"37\":1}}],[\"3rd\",{\"1\":{\"25\":1}}],[\"360\",{\"1\":{\"13\":1}}],[\"3d游戏编程大师技巧\",{\"1\":{\"25\":1}}],[\"3d数学基础\",{\"1\":{\"25\":1}}],[\"3d\",{\"0\":{\"11\":1,\"17\":1}}],[\"3\",{\"1\":{\"5\":1,\"15\":1,\"25\":1,\"37\":2}}],[\"zh\",{\"1\":{\"5\":4,\"22\":1,\"25\":4}}],[\"draw\",{\"1\":{\"37\":1}}],[\"data\",{\"1\":{\"31\":1}}],[\"dataview\",{\"1\":{\"31\":2}}],[\"date\",{\"1\":{\"29\":2}}],[\"document\",{\"1\":{\"37\":1}}],[\"doctype\",{\"1\":{\"37\":1}}],[\"docs\",{\"1\":{\"5\":4,\"25\":4}}],[\"done\",{\"1\":{\"29\":1}}],[\"duration\",{\"1\":{\"29\":3}}],[\"define\",{\"1\":{\"37\":1}}],[\"descendants\",{\"1\":{\"35\":1}}],[\"deg\",{\"1\":{\"15\":2}}],[\"degree\",{\"1\":{\"15\":1}}],[\"depthwrite\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"depthtest\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"depthstencilstate\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"dx\",{\"1\":{\"13\":2}}],[\"d\",{\"1\":{\"13\":5}}],[\"d3d采用行矩阵和行向量就是迎合显卡特性\",{\"1\":{\"11\":1}}],[\"dis\",{\"1\":{\"9\":2,\"13\":6,\"15\":3}}],[\"discard\",{\"1\":{\"7\":1}}],[\"distance\",{\"1\":{\"5\":4}}],[\"语法和结构可先阅读以下4条文档\",{\"1\":{\"5\":1}}],[\"+\",{\"1\":{\"5\":4,\"7\":3,\"9\":1,\"13\":3,\"15\":5}}],[\"git\",{\"1\":{\"37\":2}}],[\"github\",{\"1\":{\"21\":1,\"37\":1}}],[\"group\",{\"1\":{\"35\":1}}],[\"gray\",{\"1\":{\"5\":6,\"15\":3}}],[\"gldeletebuffers\",{\"1\":{\"37\":1}}],[\"gldrawarrays\",{\"1\":{\"37\":1}}],[\"glenablevertexattribarray\",{\"1\":{\"37\":1}}],[\"glext\",{\"1\":{\"37\":1}}],[\"glvertexattribpointer\",{\"1\":{\"37\":1}}],[\"glgetuniformlocation\",{\"1\":{\"37\":1}}],[\"glgetattriblocation\",{\"1\":{\"37\":1}}],[\"glgenbuffers\",{\"1\":{\"37\":1}}],[\"glgenvertexarraysoes\",{\"1\":{\"37\":1}}],[\"glint\",{\"1\":{\"37\":1}}],[\"glbufferdata\",{\"1\":{\"37\":1}}],[\"glbindbuffer\",{\"1\":{\"37\":1}}],[\"glbindvertexarrayoes\",{\"1\":{\"37\":1}}],[\"gluniform4fv\",{\"1\":{\"37\":1}}],[\"gluseprogram\",{\"1\":{\"37\":1}}],[\"gluint\",{\"1\":{\"37\":6}}],[\"gllinkprogram\",{\"1\":{\"37\":1}}],[\"glattachshader\",{\"1\":{\"37\":2}}],[\"glclear\",{\"1\":{\"37\":1}}],[\"glclearcolor\",{\"1\":{\"37\":1}}],[\"glcreateprogram\",{\"1\":{\"37\":1}}],[\"glcreateshader\",{\"1\":{\"37\":2}}],[\"glcompileshader\",{\"1\":{\"37\":2}}],[\"glshadersource\",{\"1\":{\"37\":2}}],[\"glfloat\",{\"1\":{\"37\":2}}],[\"gl\",{\"1\":{\"37\":12}}],[\"gl4\",{\"1\":{\"24\":1}}],[\"global>\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":2,\"13\":2,\"15\":2}}],[\"gen\",{\"1\":{\"29\":3}}],[\"generator\",{\"1\":{\"29\":8}}],[\"general\",{\"1\":{\"11\":3,\"17\":1}}],[\"gettime\",{\"1\":{\"29\":2}}],[\"gettextpos\",{\"1\":{\"15\":2}}],[\"getitemgenerator\",{\"1\":{\"29\":2}}],[\"getdistextpos\",{\"1\":{\"15\":2}}],[\"getcomponent\",{\"1\":{\"5\":5}}],[\"getuilocation\",{\"1\":{\"5\":2}}],[\"getnum\",{\"1\":{\"5\":3}}],[\"g\",{\"1\":{\"5\":4,\"15\":2}}],[\"body>\",{\"1\":{\"37\":1}}],[\"bool\",{\"1\":{\"17\":1}}],[\"buffer\",{\"1\":{\"37\":3}}],[\"builtin\",{\"1\":{\"5\":3,\"7\":1,\"9\":1,\"11\":2,\"13\":1,\"15\":1}}],[\"based\",{\"1\":{\"25\":1}}],[\"batch>\",{\"1\":{\"11\":2}}],[\"browse\",{\"1\":{\"23\":1}}],[\"bit\",{\"1\":{\"37\":1}}],[\"bitangent\",{\"1\":{\"11\":2}}],[\"binding\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"b2\",{\"1\":{\"9\":2}}],[\"blur\",{\"1\":{\"9\":3}}],[\"blenddstalpha\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":1}}],[\"blenddst\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":1}}],[\"blendsrcalpha\",{\"1\":{\"11\":1}}],[\"blendsrc\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":1}}],[\"blendstate\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":1}}],[\"blend\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":1}}],[\"b\",{\"1\":{\"5\":4,\"7\":2,\"15\":2}}],[\"<body>\",{\"1\":{\"37\":1}}],[\"<title>更新三角形<\",{\"1\":{\"37\":1}}],[\"<meta\",{\"1\":{\"37\":1}}],[\"<head>\",{\"1\":{\"37\":1}}],[\"<html\",{\"1\":{\"37\":1}}],[\"<emscripten\",{\"1\":{\"37\":1}}],[\"<embedded\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"<script\",{\"1\":{\"37\":1}}],[\"<script>\",{\"1\":{\"37\":1}}],[\"<stdio\",{\"1\":{\"37\":1}}],[\"<sdl\",{\"1\":{\"37\":2}}],[\"<functional>\",{\"1\":{\"37\":1}}],[\"<=0\",{\"1\":{\"17\":1}}],[\"<=\",{\"1\":{\"13\":1,\"15\":1}}],[\"<input\",{\"1\":{\"11\":2}}],[\"<input>\",{\"1\":{\"11\":1}}],[\"<output>\",{\"1\":{\"11\":3,\"17\":1}}],[\"<\",{\"1\":{\"5\":2,\"7\":2,\"29\":1,\"37\":5}}],[\"<alpha\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"<canvas\",{\"1\":{\"37\":1}}],[\"<common>\",{\"1\":{\"5\":2,\"13\":1,\"15\":1}}],[\"<cc\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":7,\"13\":3,\"15\":3}}],[\"h>\",{\"1\":{\"37\":4}}],[\"has\",{\"1\":{\"11\":2}}],[\"handle\",{\"1\":{\"5\":2,\"13\":1,\"15\":1}}],[\"head>\",{\"1\":{\"37\":1}}],[\"header\",{\"1\":{\"11\":2}}],[\"height=\",{\"1\":{\"37\":1}}],[\"height\",{\"1\":{\"5\":5,\"31\":1}}],[\"high\",{\"1\":{\"5\":2}}],[\"highp\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":5,\"13\":2,\"15\":2,\"17\":1}}],[\"html>\",{\"1\":{\"37\":2}}],[\"html来进行使用\",{\"1\":{\"37\":1}}],[\"html\",{\"1\":{\"5\":4,\"25\":4}}],[\"https\",{\"1\":{\"5\":4,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"37\":1}}],[\"emcc\",{\"1\":{\"37\":1}}],[\"emsdk\",{\"1\":{\"37\":5}}],[\"emscripten\",{\"1\":{\"37\":5}}],[\"embedded\",{\"1\":{\"5\":1}}],[\"extern\",{\"1\":{\"37\":2}}],[\"exported\",{\"1\":{\"35\":1}}],[\"execute\",{\"1\":{\"29\":3}}],[\"executepreframe\",{\"1\":{\"29\":2}}],[\"etc2\",{\"1\":{\"31\":1}}],[\"error\",{\"1\":{\"35\":1}}],[\"err\",{\"1\":{\"27\":3,\"31\":3,\"35\":2}}],[\"en\",{\"1\":{\"37\":1}}],[\"env\",{\"1\":{\"37\":1}}],[\"enablegradient\",{\"1\":{\"13\":2}}],[\"enablefog\",{\"1\":{\"13\":2}}],[\"endif\",{\"1\":{\"5\":19,\"7\":8,\"9\":6,\"11\":2,\"13\":11,\"15\":8}}],[\"editor\",{\"1\":{\"7\":1,\"9\":4,\"11\":1,\"13\":2,\"15\":4}}],[\"eventtouch\",{\"1\":{\"5\":1}}],[\"effect\",{\"1\":{\"5\":1,\"25\":1}}],[\"effect结构https\",{\"1\":{\"25\":1}}],[\"effect结构\",{\"1\":{\"5\":1}}],[\"else\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":2,\"15\":1,\"17\":1}}],[\"mediump\",{\"1\":{\"37\":1}}],[\"ms\",{\"1\":{\"29\":1}}],[\"module\",{\"1\":{\"37\":1}}],[\"mod\",{\"1\":{\"13\":1}}],[\"migrations\",{\"1\":{\"11\":4,\"17\":2}}],[\"min\",{\"1\":{\"9\":1}}],[\"minus\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":2,\"13\":2,\"15\":2}}],[\"magnifier\",{\"1\":{\"15\":1}}],[\"magnifierscale\",{\"1\":{\"15\":3}}],[\"magnifierradius\",{\"1\":{\"15\":3}}],[\"magnifiercenterpoint\",{\"1\":{\"15\":3}}],[\"map\",{\"1\":{\"11\":1}}],[\"main\",{\"1\":{\"37\":3}}],[\"maincolor\",{\"1\":{\"11\":3}}],[\"maintexture\",{\"1\":{\"11\":4,\"17\":3}}],[\"max\",{\"1\":{\"9\":1}}],[\"manual\",{\"1\":{\"5\":4,\"25\":4}}],[\"mat4\",{\"1\":{\"11\":2}}],[\"material\",{\"1\":{\"5\":4,\"25\":1}}],[\"matproj\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":3,\"13\":1,\"15\":1}}],[\"matviewproj\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"matview\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":3,\"13\":1,\"15\":1}}],[\"matworldit\",{\"1\":{\"11\":3}}],[\"matworld\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":9,\"13\":1,\"15\":1}}],[\"180\",{\"1\":{\"13\":1}}],[\"1为例子\",{\"1\":{\"11\":1}}],[\"10\",{\"1\":{\"7\":1,\"15\":1}}],[\"101\",{\"1\":{\"5\":1,\"25\":1}}],[\"1之间\",{\"1\":{\"5\":1}}],[\"1之间的\",{\"1\":{\"5\":1}}],[\"11\",{\"1\":{\"5\":2,\"9\":1,\"13\":1}}],[\"1\",{\"1\":{\"5\":33,\"7\":7,\"9\":6,\"11\":11,\"13\":15,\"15\":7,\"17\":5,\"25\":1,\"27\":1,\"29\":1,\"37\":13}}],[\"==\",{\"1\":{\"29\":1,\"35\":1}}],[\"=>\",{\"1\":{\"29\":3,\"35\":3}}],[\"=texture\",{\"1\":{\"17\":2}}],[\"=vec4\",{\"1\":{\"11\":2,\"17\":1}}],[\"=color\",{\"1\":{\"5\":1}}],[\"=\",{\"1\":{\"5\":55,\"7\":16,\"9\":23,\"11\":9,\"13\":29,\"15\":28,\"27\":9,\"29\":6,\"31\":4,\"35\":8,\"37\":19}}],[\"utf\",{\"1\":{\"37\":1}}],[\"update\",{\"1\":{\"37\":1}}],[\"updatetriangle和\",{\"1\":{\"37\":1}}],[\"updatetriangle\",{\"1\":{\"37\":3}}],[\"updatecolor方法来更新三角形和颜色\",{\"1\":{\"37\":1}}],[\"updatecolor\",{\"1\":{\"37\":3}}],[\"url\",{\"1\":{\"31\":1}}],[\"url2\",{\"1\":{\"31\":2}}],[\"unlit\",{\"1\":{\"11\":9,\"17\":2}}],[\"uniformhttps\",{\"1\":{\"25\":1}}],[\"uniforms\",{\"1\":{\"5\":1}}],[\"uniform\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":3,\"13\":2,\"15\":2,\"17\":3,\"25\":1,\"37\":2}}],[\"uitransform\",{\"1\":{\"5\":3}}],[\"uv1\",{\"1\":{\"11\":2}}],[\"uv\",{\"1\":{\"5\":7,\"9\":6,\"11\":7,\"13\":2,\"15\":13,\"17\":4}}],[\"uv0\",{\"1\":{\"5\":16,\"7\":9,\"9\":9,\"13\":10,\"15\":5}}],[\"users\",{\"1\":{\"31\":1}}],[\"use\",{\"1\":{\"5\":13,\"7\":8,\"9\":6,\"13\":6,\"15\":5,\"37\":1}}],[\"o3\",{\"1\":{\"37\":1}}],[\"org\",{\"1\":{\"22\":1,\"24\":1}}],[\"order\",{\"1\":{\"11\":1}}],[\"open\",{\"1\":{\"35\":1}}],[\"opengles2\",{\"1\":{\"37\":1}}],[\"opengl\",{\"1\":{\"24\":1,\"25\":1}}],[\"opengl4接口和方法\",{\"0\":{\"24\":1}}],[\"opengl文档\",{\"0\":{\"21\":1}}],[\"opaque\",{\"1\":{\"11\":3,\"17\":1}}],[\"othertexture\",{\"1\":{\"17\":3}}],[\"o=addlightcolor\",{\"1\":{\"13\":1}}],[\"offsetdis\",{\"1\":{\"13\":2}}],[\"o\",{\"1\":{\"5\":43,\"7\":10,\"9\":7,\"13\":6,\"15\":11,\"37\":1}}],[\"outputpath\",{\"1\":{\"35\":3}}],[\"outputfilename\",{\"1\":{\"35\":2}}],[\"output\",{\"1\":{\"35\":3}}],[\"out\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":7,\"13\":2,\"15\":2}}],[\"one\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":2,\"13\":2,\"15\":2}}],[\"array\",{\"1\":{\"37\":2}}],[\"args\",{\"1\":{\"7\":1,\"9\":1}}],[\"attribute\",{\"1\":{\"37\":1}}],[\"atlas\",{\"1\":{\"7\":1}}],[\"activate\",{\"1\":{\"37\":1}}],[\"await\",{\"1\":{\"29\":1}}],[\"async\",{\"1\":{\"29\":1}}],[\"assests\",{\"1\":{\"27\":3,\"31\":4}}],[\"assetmanager\",{\"1\":{\"27\":1,\"31\":1}}],[\"abs\",{\"1\":{\"13\":2,\"15\":5}}],[\"angle\",{\"1\":{\"13\":1}}],[\"angleinradians\",{\"1\":{\"13\":4}}],[\"anchorpoint\",{\"1\":{\"13\":3}}],[\"addlightcolor\",{\"1\":{\"13\":1}}],[\"addcolor\",{\"1\":{\"13\":3}}],[\"apply\",{\"1\":{\"11\":1}}],[\"a2\",{\"1\":{\"9\":2}}],[\"all\",{\"1\":{\"35\":1}}],[\"alignment\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"alpha和\",{\"1\":{\"5\":1}}],[\"alpha>\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"alphathreshold\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"alpha\",{\"1\":{\"5\":13,\"7\":4,\"9\":4,\"11\":4,\"13\":4,\"15\":4}}],[\"a\",{\"1\":{\"5\":12,\"7\":11,\"9\":10,\"11\":5,\"13\":13,\"15\":6,\"37\":3}}],[\"rgba\",{\"1\":{\"31\":1}}],[\"round\",{\"1\":{\"27\":2}}],[\"rotation\",{\"1\":{\"13\":3}}],[\"require\",{\"1\":{\"35\":2}}],[\"render\",{\"1\":{\"37\":4}}],[\"rendertexture\",{\"1\":{\"31\":1}}],[\"rendering\",{\"1\":{\"25\":2}}],[\"reject\",{\"1\":{\"29\":1}}],[\"resolve\",{\"1\":{\"29\":2}}],[\"real\",{\"1\":{\"25\":1}}],[\"refpages\",{\"1\":{\"24\":1}}],[\"registry\",{\"1\":{\"24\":1}}],[\"return\",{\"1\":{\"5\":11,\"7\":2,\"9\":2,\"11\":5,\"13\":4,\"15\":5,\"17\":1,\"29\":3,\"35\":1}}],[\"ry\",{\"1\":{\"9\":3}}],[\"rx\",{\"1\":{\"9\":3}}],[\"radians\",{\"1\":{\"13\":1}}],[\"radius\",{\"1\":{\"9\":4,\"15\":4}}],[\"range\",{\"1\":{\"13\":1}}],[\"ratio\",{\"1\":{\"9\":4}}],[\"rasterizerstate\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"r\",{\"1\":{\"5\":4,\"7\":2,\"15\":2}}],[\"rt\",{\"1\":{\"5\":6,\"13\":3,\"15\":3}}],[\"lang=\",{\"1\":{\"37\":1}}],[\"latest\",{\"1\":{\"37\":2}}],[\"layername\",{\"1\":{\"35\":3}}],[\"layer\",{\"1\":{\"35\":5}}],[\"layers\",{\"1\":{\"35\":3}}],[\"layout\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"length\",{\"1\":{\"29\":4}}],[\"lessons\",{\"1\":{\"22\":1}}],[\"learnopengl\",{\"1\":{\"21\":1}}],[\"let\",{\"1\":{\"5\":4,\"27\":4,\"29\":5,\"31\":4,\"35\":1}}],[\"lightoffsetx\",{\"1\":{\"13\":3}}],[\"lightangle\",{\"1\":{\"13\":3}}],[\"lightcenterpoint\",{\"1\":{\"13\":5}}],[\"lightcolor\",{\"1\":{\"13\":2}}],[\"lightwidth\",{\"1\":{\"13\":7}}],[\"list\",{\"1\":{\"5\":1,\"25\":1}}],[\"loadany\",{\"1\":{\"31\":1}}],[\"loadres\",{\"1\":{\"27\":1}}],[\"log\",{\"1\":{\"27\":1,\"31\":1,\"35\":2}}],[\"low\",{\"1\":{\"5\":2}}],[\"local>\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"local\",{\"1\":{\"5\":6,\"7\":3,\"9\":3,\"11\":2,\"13\":3,\"15\":3}}],[\"ltd\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1}}],[\"iter\",{\"1\":{\"29\":4}}],[\"i++\",{\"1\":{\"29\":1}}],[\"i\",{\"1\":{\"29\":3}}],[\"image\",{\"1\":{\"27\":1}}],[\"imageasset\",{\"1\":{\"27\":1}}],[\"imgasset\",{\"1\":{\"27\":2}}],[\"io\",{\"1\":{\"21\":1}}],[\"isback\",{\"1\":{\"17\":1}}],[\"isback=dot\",{\"1\":{\"17\":1}}],[\"is\",{\"1\":{\"5\":2,\"15\":1}}],[\"int\",{\"1\":{\"37\":1}}],[\"install\",{\"1\":{\"34\":1,\"37\":1}}],[\"initwithdata\",{\"1\":{\"31\":1}}],[\"inititem\",{\"1\":{\"29\":2}}],[\"index\",{\"1\":{\"24\":1,\"29\":1}}],[\"in\",{\"1\":{\"5\":10,\"7\":6,\"9\":6,\"11\":12,\"13\":5,\"15\":5,\"17\":3}}],[\"include\",{\"1\":{\"5\":10,\"7\":4,\"9\":4,\"11\":13,\"13\":6,\"15\":6,\"17\":1,\"37\":5}}],[\"if\",{\"1\":{\"5\":19,\"7\":10,\"9\":6,\"11\":2,\"13\":13,\"15\":9,\"17\":1,\"27\":1,\"29\":2,\"31\":1,\"35\":1}}],[\"5f\",{\"1\":{\"37\":5}}],[\"56\",{\"1\":{\"15\":2}}],[\"5的时候\",{\"1\":{\"5\":1}}],[\"5\",{\"1\":{\"5\":12,\"7\":3,\"9\":6,\"13\":6,\"15\":5}}],[\"0f\",{\"1\":{\"37\":5}}],[\"0以上完成\",{\"1\":{\"25\":1}}],[\"03\",{\"1\":{\"15\":1}}],[\"01\",{\"1\":{\"5\":2,\"9\":1,\"13\":1}}],[\"0722\",{\"1\":{\"5\":2,\"15\":1}}],[\"0\",{\"1\":{\"5\":30,\"7\":10,\"9\":7,\"11\":5,\"13\":21,\"15\":19,\"17\":1,\"29\":1,\"37\":16}}],[\"0中大部分的着色器是3d的\",{\"1\":{\"5\":1}}],[\"png`\",{\"1\":{\"35\":1}}],[\"png\",{\"1\":{\"35\":1}}],[\"psdpath\",{\"1\":{\"35\":2}}],[\"psdtopng\",{\"1\":{\"35\":2}}],[\"psd\",{\"1\":{\"33\":1,\"34\":1,\"35\":7}}],[\"psd文件处理\",{\"0\":{\"33\":1}}],[\"pkm\",{\"1\":{\"31\":1}}],[\"physically\",{\"1\":{\"25\":1}}],[\"php\",{\"1\":{\"24\":1}}],[\"pct\",{\"1\":{\"7\":4}}],[\"pow\",{\"1\":{\"15\":1}}],[\"point\",{\"1\":{\"5\":15}}],[\"points\",{\"1\":{\"5\":2}}],[\"pos\",{\"1\":{\"5\":24,\"7\":12,\"9\":12,\"11\":4,\"13\":12,\"15\":12}}],[\"position\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":9,\"13\":2,\"15\":2,\"17\":2,\"37\":7}}],[\"path\",{\"1\":{\"35\":3,\"37\":1}}],[\"param\",{\"1\":{\"29\":2}}],[\"parameter\",{\"1\":{\"5\":1,\"25\":1}}],[\"packable\",{\"1\":{\"27\":1}}],[\"pass\",{\"1\":{\"5\":2,\"25\":2}}],[\"passes\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":4,\"13\":1,\"15\":1,\"17\":1}}],[\"pixelformat\",{\"1\":{\"31\":1}}],[\"pixel\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"printf\",{\"1\":{\"37\":2}}],[\"private\",{\"1\":{\"29\":2}}],[\"program\",{\"1\":{\"37\":7}}],[\"prototypes\",{\"1\":{\"37\":1}}],[\"promise\",{\"1\":{\"29\":1}}],[\"props\",{\"1\":{\"11\":4,\"17\":1}}],[\"properties里添加两个属性\",{\"1\":{\"5\":1}}],[\"properties\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":6,\"13\":1,\"15\":1,\"17\":2}}],[\"pragma\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"precision\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":5,\"13\":2,\"15\":2,\"17\":1,\"37\":1}}],[\"title>\",{\"1\":{\"37\":1}}],[\"time\",{\"1\":{\"15\":1,\"25\":1}}],[\"tpos\",{\"1\":{\"15\":4}}],[\"then\",{\"1\":{\"35\":1}}],[\"the\",{\"1\":{\"11\":1}}],[\"this\",{\"1\":{\"5\":5,\"27\":1,\"29\":4}}],[\"tan\",{\"1\":{\"13\":3}}],[\"tangent\",{\"1\":{\"11\":5}}],[\"target\",{\"1\":{\"5\":3}}],[\"targets\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":1}}],[\"triangles\",{\"1\":{\"37\":1}}],[\"triangle\",{\"1\":{\"37\":2}}],[\"tree\",{\"1\":{\"35\":1}}],[\"transfer\",{\"1\":{\"11\":2}}],[\"transparent\",{\"1\":{\"11\":1}}],[\"true\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":1}}],[\"type\",{\"1\":{\"11\":1,\"13\":1,\"35\":3}}],[\"to\",{\"1\":{\"35\":1}}],[\"tocenterdis\",{\"1\":{\"15\":1}}],[\"tooltip\",{\"1\":{\"7\":1,\"9\":4,\"13\":1,\"15\":4}}],[\"touchmove\",{\"1\":{\"5\":1}}],[\"tempcenter\",{\"1\":{\"15\":1}}],[\"testnode\",{\"1\":{\"27\":1}}],[\"test的方法\",{\"1\":{\"5\":1}}],[\"test\",{\"1\":{\"5\":7,\"9\":1,\"13\":1,\"15\":1,\"27\":1,\"35\":1}}],[\"test>\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"textureproportion\",{\"1\":{\"15\":1}}],[\"texturecolor\",{\"1\":{\"13\":5}}],[\"texture2d\",{\"1\":{\"7\":1,\"27\":1,\"31\":1}}],[\"texture\",{\"1\":{\"5\":7,\"7\":6,\"9\":3,\"11\":1,\"13\":3,\"15\":2,\"27\":4,\"31\":3}}],[\"texcoord1\",{\"1\":{\"11\":2}}],[\"texcoord\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":1,\"13\":2,\"15\":2}}],[\"techniques\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":3,\"13\":1,\"15\":1,\"17\":1}}],[\"f\",{\"1\":{\"37\":2}}],[\"foreach\",{\"1\":{\"35\":1}}],[\"for\",{\"1\":{\"29\":2}}],[\"format\",{\"1\":{\"27\":1}}],[\"fog\",{\"1\":{\"11\":4}}],[\"function\",{\"1\":{\"27\":1,\"31\":1,\"35\":1}}],[\"finallightcolor\",{\"1\":{\"13\":2}}],[\"fade\",{\"1\":{\"7\":4}}],[\"false\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"13\":2,\"15\":2,\"27\":1,\"37\":1}}],[\"flip\",{\"1\":{\"5\":2,\"13\":1,\"15\":1}}],[\"floor\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"float\",{\"1\":{\"5\":13,\"7\":3,\"9\":13,\"11\":5,\"13\":15,\"15\":15,\"17\":1,\"37\":8}}],[\"framingload\",{\"1\":{\"29\":1}}],[\"frame69c\",{\"1\":{\"27\":2}}],[\"fragment\",{\"1\":{\"37\":1}}],[\"fragmentshader\",{\"1\":{\"37\":4}}],[\"fragmentshadersource\",{\"1\":{\"37\":2}}],[\"fragcolor\",{\"1\":{\"37\":1}}],[\"frag\",{\"1\":{\"5\":9,\"7\":3,\"9\":3,\"11\":11,\"13\":3,\"15\":3,\"17\":3}}],[\"from\",{\"1\":{\"5\":4,\"13\":2,\"15\":2}}],[\"fs>\",{\"1\":{\"11\":1}}],[\"fs里的frag来实现一些效果\",{\"1\":{\"5\":1}}],[\"fs\",{\"1\":{\"5\":5,\"7\":2,\"9\":2,\"11\":7,\"13\":2,\"15\":2,\"17\":2}}],[\"vbo\",{\"1\":{\"37\":4}}],[\"var\",{\"1\":{\"37\":1}}],[\"vao\",{\"1\":{\"37\":3}}],[\"valuey\",{\"1\":{\"5\":3}}],[\"valuex\",{\"1\":{\"5\":3}}],[\"value\",{\"1\":{\"5\":4,\"7\":2,\"9\":5,\"11\":2,\"13\":5,\"15\":5,\"17\":3}}],[\"void\",{\"1\":{\"37\":5}}],[\"viewdir\",{\"1\":{\"17\":1}}],[\"viewdir=normalize\",{\"1\":{\"17\":1}}],[\"v\",{\"1\":{\"7\":10,\"9\":11,\"11\":21,\"17\":8}}],[\"v3\",{\"1\":{\"5\":1}}],[\"vec4\",{\"1\":{\"5\":31,\"7\":10,\"9\":9,\"11\":15,\"13\":14,\"15\":9,\"17\":2,\"37\":2}}],[\"vec2\",{\"1\":{\"5\":13,\"7\":6,\"9\":6,\"11\":5,\"13\":5,\"15\":16,\"17\":2}}],[\"vec3\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":5,\"13\":1,\"15\":1,\"17\":3}}],[\"vertex\",{\"1\":{\"37\":1}}],[\"vertexshader\",{\"1\":{\"37\":4}}],[\"vertexshadersource\",{\"1\":{\"37\":2}}],[\"vertices\",{\"1\":{\"37\":4}}],[\"vert\",{\"1\":{\"5\":6,\"7\":3,\"9\":3,\"11\":10,\"13\":3,\"15\":3,\"17\":2}}],[\"vs>\",{\"1\":{\"11\":2}}],[\"vs\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":5,\"13\":2,\"15\":2,\"17\":1}}],[\"s\",{\"1\":{\"37\":2}}],[\"sdl=2\",{\"1\":{\"37\":1}}],[\"sdl\",{\"1\":{\"37\":2}}],[\"sdk\",{\"1\":{\"37\":1}}],[\"sh\",{\"1\":{\"37\":1}}],[\"shadow\",{\"1\":{\"11\":2}}],[\"shadertoy\",{\"1\":{\"23\":1}}],[\"shader编写案例\",{\"0\":{\"23\":1}}],[\"shader\",{\"1\":{\"5\":2,\"25\":4,\"37\":2}}],[\"shader学习\",{\"0\":{\"3\":1,\"39\":1},\"2\":{\"6\":1,\"8\":1,\"10\":1,\"12\":1,\"14\":1,\"16\":1,\"18\":1,\"26\":1}}],[\"source\",{\"1\":{\"37\":1}}],[\"software\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1}}],[\"successfully\",{\"1\":{\"35\":1}}],[\"saveaspng\",{\"1\":{\"35\":1}}],[\"samplercube\",{\"1\":{\"17\":1}}],[\"sampler2d\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":2,\"13\":1,\"15\":1,\"17\":2}}],[\"sample\",{\"1\":{\"5\":6,\"13\":3,\"15\":3}}],[\"script>\",{\"1\":{\"37\":2}}],[\"scheduleonce\",{\"1\":{\"29\":1}}],[\"scale+degree\",{\"1\":{\"15\":2}}],[\"scale\",{\"1\":{\"15\":3}}],[\"scaledegree\",{\"1\":{\"15\":1}}],[\"skycube\",{\"1\":{\"17\":2}}],[\"std=c++11\",{\"1\":{\"37\":1}}],[\"static\",{\"1\":{\"37\":1}}],[\"starttime\",{\"1\":{\"29\":2}}],[\"standardvertinput\",{\"1\":{\"11\":1}}],[\"standard>\",{\"1\":{\"11\":2}}],[\"step\",{\"1\":{\"13\":2}}],[\"sin\",{\"1\":{\"13\":1,\"15\":1}}],[\"self\",{\"1\":{\"27\":2}}],[\"second\",{\"1\":{\"11\":2}}],[\"setproperty\",{\"1\":{\"5\":2}}],[\"set\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"smoothstep\",{\"1\":{\"9\":2,\"15\":1}}],[\"syntax\",{\"1\":{\"5\":1,\"25\":1}}],[\"system\",{\"1\":{\"5\":4,\"25\":1}}],[\"src=\",{\"1\":{\"37\":1}}],[\"src\",{\"1\":{\"5\":6,\"7\":3,\"9\":3,\"11\":4,\"13\":3,\"15\":3}}],[\"spriteframe\",{\"1\":{\"27\":7,\"31\":2}}],[\"spritetexture\",{\"1\":{\"5\":7,\"7\":3,\"9\":2,\"13\":2,\"15\":2}}],[\"sprite\",{\"1\":{\"5\":10,\"7\":4,\"9\":4,\"13\":4,\"15\":4}}],[\"24\",{\"1\":{\"37\":1}}],[\"2126\",{\"1\":{\"5\":2,\"15\":1}}],[\"2\",{\"1\":{\"5\":3,\"7\":1,\"9\":1,\"13\":1,\"15\":3,\"25\":1,\"27\":1,\"31\":1,\"37\":2}}],[\"2018\",{\"1\":{\"7\":1}}],[\"2017\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1}}],[\"2020\",{\"1\":{\"5\":2,\"13\":1,\"15\":1}}],[\"2d\",{\"0\":{\"5\":1,\"13\":1,\"15\":1},\"1\":{\"13\":1}}],[\"因为3\",{\"1\":{\"5\":1}}],[\"从零开始\",{\"0\":{\"5\":1}}],[\"cpp\",{\"1\":{\"37\":1}}],[\"cpp文件\",{\"1\":{\"37\":1}}],[\"charset=\",{\"1\":{\"37\":1}}],[\"char\",{\"1\":{\"37\":2}}],[\"cd\",{\"1\":{\"37\":1}}],[\"clone\",{\"1\":{\"37\":1}}],[\"clamp\",{\"1\":{\"5\":3}}],[\"canvas\",{\"1\":{\"37\":4}}],[\"canvas>\",{\"1\":{\"37\":1}}],[\"catch\",{\"1\":{\"35\":1}}],[\"camerapos\",{\"1\":{\"17\":1}}],[\"cn\",{\"1\":{\"21\":1,\"22\":1}}],[\"createwindowandrenderer\",{\"1\":{\"37\":1}}],[\"creator2\",{\"0\":{\"41\":1}}],[\"creator3\",{\"0\":{\"40\":1}}],[\"creator\",{\"1\":{\"5\":4,\"25\":4,\"27\":1,\"31\":1}}],[\"cropalpha\",{\"1\":{\"13\":2}}],[\"cross\",{\"1\":{\"11\":2}}],[\"circle\",{\"1\":{\"9\":3}}],[\"centerpoint\",{\"1\":{\"15\":1}}],[\"center\",{\"1\":{\"9\":4,\"15\":11}}],[\"custommaterial\",{\"1\":{\"5\":2}}],[\"cullmode\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":1,\"15\":1}}],[\"ccgetworldmatrixfull\",{\"1\":{\"11\":1}}],[\"ccgetworldmatrix\",{\"1\":{\"11\":1}}],[\"ccvertinput\",{\"1\":{\"11\":2}}],[\"ccfragoutput\",{\"1\":{\"11\":3,\"17\":1}}],[\"ccsamplewithalphaseparated\",{\"1\":{\"5\":5,\"7\":2,\"9\":1,\"13\":1,\"15\":1}}],[\"cc\",{\"1\":{\"5\":17,\"7\":8,\"9\":6,\"11\":9,\"13\":7,\"15\":8,\"17\":1,\"31\":4}}],[\"ccprogram\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":4,\"13\":2,\"15\":2,\"17\":1}}],[\"cceffect\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":3,\"13\":1,\"15\":1,\"17\":1}}],[\"ccc\",{\"0\":{\"3\":1,\"39\":1},\"2\":{\"6\":1,\"8\":1,\"10\":1,\"12\":1,\"14\":1,\"16\":1,\"18\":1,\"26\":1}}],[\"c\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1,\"31\":1,\"37\":2}}],[\"core\",{\"1\":{\"37\":1}}],[\"col\",{\"1\":{\"11\":7}}],[\"colorlocation\",{\"1\":{\"37\":2}}],[\"color\",{\"1\":{\"5\":16,\"7\":5,\"9\":6,\"11\":5,\"13\":7,\"15\":6,\"17\":4,\"37\":10}}],[\"console\",{\"1\":{\"27\":1,\"31\":1,\"35\":3}}],[\"const\",{\"1\":{\"15\":4,\"35\":7,\"37\":3}}],[\"constant\",{\"1\":{\"5\":1,\"11\":1,\"13\":1}}],[\"converttonodespacear\",{\"1\":{\"5\":1}}],[\"com\",{\"1\":{\"5\":4,\"23\":1,\"25\":4,\"37\":1}}],[\"cocos就给我们预留了颜色处理的逻辑\",{\"1\":{\"5\":1}}],[\"cocos\",{\"0\":{\"40\":1,\"41\":1},\"1\":{\"5\":4,\"25\":4,\"27\":3,\"31\":1}}],[\"cocoscreator3\",{\"0\":{\"2\":1},\"2\":{\"28\":1}}],[\"cocoscreator2\",{\"0\":{\"1\":1},\"2\":{\"30\":1,\"32\":1}}],[\"co\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1}}],[\"copyright\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1}}],[\"xxx\",{\"1\":{\"31\":1}}],[\"x|\",{\"1\":{\"13\":1}}],[\"xyz\",{\"1\":{\"5\":4,\"7\":2,\"9\":2,\"11\":4,\"13\":2,\"15\":2,\"17\":1}}],[\"xiamen\",{\"1\":{\"5\":2,\"7\":1,\"13\":1,\"15\":1}}],[\"x\",{\"0\":{\"1\":1,\"2\":1,\"40\":1,\"41\":1},\"1\":{\"5\":10,\"9\":6,\"13\":4,\"15\":9,\"17\":1,\"27\":1,\"31\":1},\"2\":{\"28\":1,\"30\":1,\"32\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
